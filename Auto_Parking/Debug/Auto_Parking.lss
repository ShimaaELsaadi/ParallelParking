
Auto_Parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  000042e2  00004376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008001aa  008001aa  000044c0  2**0
                  ALLOC
  3 .stab         00003e7c  00000000  00000000  000044c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001994  00000000  00000000  0000833c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_4>
      14:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_5>
      18:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_6>
      1c:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_7>
      20:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_8>
      24:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_9>
      28:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_10>
      2c:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 20 	call	0x41cc	; 0x41cc <main>
      8a:	0c 94 6f 21 	jmp	0x42de	; 0x42de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 21 	jmp	0x4280	; 0x4280 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 48 21 	jmp	0x4290	; 0x4290 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 40 21 	jmp	0x4280	; 0x4280 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <WDT_Enable>:
#include "Routines.h"

#include "Timer/WDT/WDT_Interface.h"

void WDT_Enable(float prescaler)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <WDT_Enable+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <WDT_Enable+0x8>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <WDT_Enable+0xa>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	69 83       	std	Y+1, r22	; 0x01
     e9e:	7a 83       	std	Y+2, r23	; 0x02
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	9c 83       	std	Y+4, r25	; 0x04
	WDTCR &= 0xF8;
     ea4:	a1 e4       	ldi	r26, 0x41	; 65
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e1 e4       	ldi	r30, 0x41	; 65
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 7f       	andi	r24, 0xF8	; 248
     eb0:	8c 93       	st	X, r24
	if(prescaler==WDT_TO_16_3ms)
     eb2:	1d 82       	std	Y+5, r1	; 0x05
     eb4:	69 81       	ldd	r22, Y+1	; 0x01
     eb6:	7a 81       	ldd	r23, Y+2	; 0x02
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     ec8:	88 23       	and	r24, r24
     eca:	11 f4       	brne	.+4      	; 0xed0 <WDT_Enable+0x42>
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	9d 81       	ldd	r25, Y+5	; 0x05
     ed4:	89 27       	eor	r24, r25
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <WDT_Enable+0x4e>
     eda:	8b c0       	rjmp	.+278    	; 0xff2 <WDT_Enable+0x164>
	{

	}
	else if(prescaler==WDT_TO_32_5ms)
     edc:	69 81       	ldd	r22, Y+1	; 0x01
     ede:	7a 81       	ldd	r23, Y+2	; 0x02
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e4       	ldi	r21, 0x40	; 64
     eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	41 f4       	brne	.+16     	; 0xf04 <WDT_Enable+0x76>
	{
		WDTCR |=0xF9;
     ef4:	a1 e4       	ldi	r26, 0x41	; 65
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e1 e4       	ldi	r30, 0x41	; 65
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	89 6f       	ori	r24, 0xF9	; 249
     f00:	8c 93       	st	X, r24
     f02:	77 c0       	rjmp	.+238    	; 0xff2 <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_65ms)
     f04:	69 81       	ldd	r22, Y+1	; 0x01
     f06:	7a 81       	ldd	r23, Y+2	; 0x02
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e4       	ldi	r20, 0x40	; 64
     f12:	50 e4       	ldi	r21, 0x40	; 64
     f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     f18:	88 23       	and	r24, r24
     f1a:	41 f4       	brne	.+16     	; 0xf2c <WDT_Enable+0x9e>
	{
		WDTCR |=0xFA;
     f1c:	a1 e4       	ldi	r26, 0x41	; 65
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e1 e4       	ldi	r30, 0x41	; 65
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8a 6f       	ori	r24, 0xFA	; 250
     f28:	8c 93       	st	X, r24
     f2a:	63 c0       	rjmp	.+198    	; 0xff2 <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_130ms)
     f2c:	69 81       	ldd	r22, Y+1	; 0x01
     f2e:	7a 81       	ldd	r23, Y+2	; 0x02
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	50 e4       	ldi	r21, 0x40	; 64
     f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     f40:	88 23       	and	r24, r24
     f42:	41 f4       	brne	.+16     	; 0xf54 <WDT_Enable+0xc6>
	{
		WDTCR |=0xFB;
     f44:	a1 e4       	ldi	r26, 0x41	; 65
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e1 e4       	ldi	r30, 0x41	; 65
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8b 6f       	ori	r24, 0xFB	; 251
     f50:	8c 93       	st	X, r24
     f52:	4f c0       	rjmp	.+158    	; 0xff2 <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_260ms)
     f54:	69 81       	ldd	r22, Y+1	; 0x01
     f56:	7a 81       	ldd	r23, Y+2	; 0x02
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 ea       	ldi	r20, 0xA0	; 160
     f62:	50 e4       	ldi	r21, 0x40	; 64
     f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     f68:	88 23       	and	r24, r24
     f6a:	41 f4       	brne	.+16     	; 0xf7c <WDT_Enable+0xee>
	{
		WDTCR |=0xFC;
     f6c:	a1 e4       	ldi	r26, 0x41	; 65
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e1 e4       	ldi	r30, 0x41	; 65
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8c 6f       	ori	r24, 0xFC	; 252
     f78:	8c 93       	st	X, r24
     f7a:	3b c0       	rjmp	.+118    	; 0xff2 <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_520ms)
     f7c:	69 81       	ldd	r22, Y+1	; 0x01
     f7e:	7a 81       	ldd	r23, Y+2	; 0x02
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 ec       	ldi	r20, 0xC0	; 192
     f8a:	50 e4       	ldi	r21, 0x40	; 64
     f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     f90:	88 23       	and	r24, r24
     f92:	41 f4       	brne	.+16     	; 0xfa4 <WDT_Enable+0x116>
	{
		WDTCR |=0xFD;
     f94:	a1 e4       	ldi	r26, 0x41	; 65
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e4       	ldi	r30, 0x41	; 65
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8d 6f       	ori	r24, 0xFD	; 253
     fa0:	8c 93       	st	X, r24
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_1s)
     fa4:	69 81       	ldd	r22, Y+1	; 0x01
     fa6:	7a 81       	ldd	r23, Y+2	; 0x02
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 ee       	ldi	r20, 0xE0	; 224
     fb2:	50 e4       	ldi	r21, 0x40	; 64
     fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     fb8:	88 23       	and	r24, r24
     fba:	41 f4       	brne	.+16     	; 0xfcc <WDT_Enable+0x13e>
	{
		WDTCR |=0xFE;
     fbc:	a1 e4       	ldi	r26, 0x41	; 65
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e1 e4       	ldi	r30, 0x41	; 65
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8e 6f       	ori	r24, 0xFE	; 254
     fc8:	8c 93       	st	X, r24
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_2_1s)
     fcc:	69 81       	ldd	r22, Y+1	; 0x01
     fce:	7a 81       	ldd	r23, Y+2	; 0x02
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	51 e4       	ldi	r21, 0x41	; 65
     fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	39 f4       	brne	.+14     	; 0xff2 <WDT_Enable+0x164>
	{
		WDTCR |=0xFF;
     fe4:	e1 e4       	ldi	r30, 0x41	; 65
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	e1 e4       	ldi	r30, 0x41	; 65
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	80 83       	st	Z, r24
	}

	SET_BIT(WDTCR,3);
     ff2:	a1 e4       	ldi	r26, 0x41	; 65
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e1 e4       	ldi	r30, 0x41	; 65
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	8c 93       	st	X, r24
}
    1000:	26 96       	adiw	r28, 0x06	; 6
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <WDT_Disable>:

void WDT_Disable(void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (3<<3);
    101a:	a1 e4       	ldi	r26, 0x41	; 65
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e1 e4       	ldi	r30, 0x41	; 65
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 61       	ori	r24, 0x18	; 24
    1026:	8c 93       	st	X, r24
	WDTCR &=~ (1<<4);
    1028:	a1 e4       	ldi	r26, 0x41	; 65
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e1 e4       	ldi	r30, 0x41	; 65
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7e       	andi	r24, 0xEF	; 239
    1034:	8c 93       	st	X, r24
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <Timer2_init>:

static void (*p2f_ov)()=NULL_PTR;
static void (*p2f_cmp)()=NULL_PTR;

void Timer2_init(void)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,3);

#elif Timer2_mode==Fast_PWM_mode

	#if Timer2_modeofcmp==Non_Inverting  //cmp_mode
		TCCR2|=(Non_Inverting<<4);
    1044:	a5 e4       	ldi	r26, 0x45	; 69
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e4       	ldi	r30, 0x45	; 69
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 62       	ori	r24, 0x20	; 32
    1050:	8c 93       	st	X, r24
	#elif Timer2_modeofcmp==Inverting
		TCCR2|=(Inverting<<4);

	#endif

	SET_BIT(TCCR2,6);
    1052:	a5 e4       	ldi	r26, 0x45	; 69
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e4       	ldi	r30, 0x45	; 69
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 64       	ori	r24, 0x40	; 64
    105e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
    1060:	a5 e4       	ldi	r26, 0x45	; 69
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e4       	ldi	r30, 0x45	; 69
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	8c 93       	st	X, r24

#endif
	return;
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <Timer2_start>:

void Timer2_start(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xf8;
    107c:	a5 e4       	ldi	r26, 0x45	; 69
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e4       	ldi	r30, 0x45	; 69
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 7f       	andi	r24, 0xF8	; 248
    1088:	8c 93       	st	X, r24
	TCCR2 |=Timer2_Prescaler;
    108a:	a5 e4       	ldi	r26, 0x45	; 69
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e4       	ldi	r30, 0x45	; 69
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	85 60       	ori	r24, 0x05	; 5
    1096:	8c 93       	st	X, r24
	return;
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Timer2_stop>:

void Timer2_stop(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	TCCR2&=0xf8;
    10a6:	a5 e4       	ldi	r26, 0x45	; 69
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e4       	ldi	r30, 0x45	; 69
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 7f       	andi	r24, 0xF8	; 248
    10b2:	8c 93       	st	X, r24
	return;
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <Timer2_set_int_value>:

void Timer2_set_int_value(u8 value)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	0f 92       	push	r0
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=value;
    10c6:	e4 e4       	ldi	r30, 0x44	; 68
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	80 83       	st	Z, r24
	return ;
}
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <Timer2_set_cmp_value>:

void Timer2_set_cmp_value(u8 value)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
	OCR2=value;
    10e2:	e3 e4       	ldi	r30, 0x43	; 67
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	80 83       	st	Z, r24
	return ;
}
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <Timer2_PWM_set_cmp>:

void Timer2_PWM_set_cmp(u8 duty)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	89 83       	std	Y+1, r24	; 0x01
	#if Timer2_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR2=(duty*resoultion/100)-1;
    10fe:	e3 e4       	ldi	r30, 0x43	; 67
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	98 2f       	mov	r25, r24
    110a:	88 27       	eor	r24, r24
    110c:	24 e6       	ldi	r18, 0x64	; 100
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	b9 01       	movw	r22, r18
    1112:	0e 94 03 21 	call	0x4206	; 0x4206 <__divmodhi4>
    1116:	cb 01       	movw	r24, r22
    1118:	81 50       	subi	r24, 0x01	; 1
    111a:	80 83       	st	Z, r24

	return ;
}
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <Timer2_PWM_set_cmp_PC>:

void Timer2_PWM_set_cmp_PC (u8 duty)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	89 83       	std	Y+1, r24	; 0x01
	#if Timer2_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR2 = ((duty*resoultion/50)-1);
    1130:	e3 e4       	ldi	r30, 0x43	; 67
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	98 2f       	mov	r25, r24
    113c:	88 27       	eor	r24, r24
    113e:	22 e3       	ldi	r18, 0x32	; 50
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	b9 01       	movw	r22, r18
    1144:	0e 94 03 21 	call	0x4206	; 0x4206 <__divmodhi4>
    1148:	cb 01       	movw	r24, r22
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	80 83       	st	Z, r24
	return ;
}
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <Timer2_OV_InterruptEnable>:

void Timer2_OV_InterruptEnable(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,6);
    115e:	a9 e5       	ldi	r26, 0x59	; 89
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e9 e5       	ldi	r30, 0x59	; 89
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 64       	ori	r24, 0x40	; 64
    116a:	8c 93       	st	X, r24
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <Timer2_OV_InterruptDisable>:
void Timer2_OV_InterruptDisable(void)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,6);
    117a:	a9 e5       	ldi	r26, 0x59	; 89
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e9 e5       	ldi	r30, 0x59	; 89
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	8c 93       	st	X, r24
}
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <Timer2_OC_InterruptEnable>:
void Timer2_OC_InterruptEnable(void)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,7);
    1196:	a9 e5       	ldi	r26, 0x59	; 89
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e9 e5       	ldi	r30, 0x59	; 89
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	8c 93       	st	X, r24
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <Timer2_OC_InterruptDisable>:
void Timer2_OC_InterruptDisable(void)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,7);
    11b2:	a9 e5       	ldi	r26, 0x59	; 89
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e9 e5       	ldi	r30, 0x59	; 89
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 77       	andi	r24, 0x7F	; 127
    11be:	8c 93       	st	X, r24
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <Timer2_OV_set_callbck>:

void Timer2_OV_set_callbck(void (*p2f_var)(void))
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <Timer2_OV_set_callbck+0x6>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	31 f0       	breq	.+12     	; 0x11e8 <Timer2_OV_set_callbck+0x22>
	{
		p2f_ov=p2f_var;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	90 93 ab 01 	sts	0x01AB, r25
    11e4:	80 93 aa 01 	sts	0x01AA, r24
	}
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <Timer2_OC_set_callbck>:

void Timer2_OC_set_callbck(void (*p2f_var)(void))
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <Timer2_OC_set_callbck+0x6>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	31 f0       	breq	.+12     	; 0x1214 <Timer2_OC_set_callbck+0x22>
	{
		p2f_cmp=p2f_var;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	90 93 ad 01 	sts	0x01AD, r25
    1210:	80 93 ac 01 	sts	0x01AC, r24
	}
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	p2f_ov();
    1248:	e0 91 aa 01 	lds	r30, 0x01AA
    124c:	f0 91 ab 01 	lds	r31, 0x01AB
    1250:	09 95       	icall
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	p2f_cmp();
    12a2:	e0 91 ac 01 	lds	r30, 0x01AC
    12a6:	f0 91 ad 01 	lds	r31, 0x01AD
    12aa:	09 95       	icall
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <Timer1_init>:
static void (*p2f_OCA)()=NULL_PTR;
static void (*p2f_OCB)()=NULL_PTR;
static void (*p2f_ICU)()=NULL_PTR;

void Timer1_init(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
#if Timer1_mode==Normal_mode  //mode
	CLR_BIT(TCCR1A,0);
    12da:	af e4       	ldi	r26, 0x4F	; 79
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ef e4       	ldi	r30, 0x4F	; 79
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    12e8:	af e4       	ldi	r26, 0x4F	; 79
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e4       	ldi	r30, 0x4F	; 79
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8d 7f       	andi	r24, 0xFD	; 253
    12f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    12f6:	ae e4       	ldi	r26, 0x4E	; 78
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ee e4       	ldi	r30, 0x4E	; 78
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	87 7f       	andi	r24, 0xF7	; 247
    1302:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    1304:	ae e4       	ldi	r26, 0x4E	; 78
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ee e4       	ldi	r30, 0x4E	; 78
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7e       	andi	r24, 0xEF	; 239
    1310:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);
		SET_BIT(TCCR1B,4);

#endif
	return;
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <Timer1_start>:

void Timer1_start(void)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0xf8;
    1320:	ae e4       	ldi	r26, 0x4E	; 78
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ee e4       	ldi	r30, 0x4E	; 78
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 7f       	andi	r24, 0xF8	; 248
    132c:	8c 93       	st	X, r24
	TCCR1B |=Timer1_Prescaler;
    132e:	ae e4       	ldi	r26, 0x4E	; 78
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ee e4       	ldi	r30, 0x4E	; 78
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	82 60       	ori	r24, 0x02	; 2
    133a:	8c 93       	st	X, r24
	return;
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <Timer1_stop>:

void Timer1_stop(void)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=0xf8;
    134a:	ae e4       	ldi	r26, 0x4E	; 78
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ee e4       	ldi	r30, 0x4E	; 78
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	88 7f       	andi	r24, 0xF8	; 248
    1356:	8c 93       	st	X, r24
	return;
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <Timer1_set_int_value>:

void Timer1_set_int_value(u16 value)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <Timer1_set_int_value+0x6>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=value;
    136c:	ec e4       	ldi	r30, 0x4C	; 76
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	80 83       	st	Z, r24
	return ;
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <Timer1_set_cmp_value>:

void Timer1_set_cmp_value(u16 value)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <Timer1_set_cmp_value+0x6>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=value;
    138c:	ea e4       	ldi	r30, 0x4A	; 74
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	9a 81       	ldd	r25, Y+2	; 0x02
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	80 83       	st	Z, r24
	return ;
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <Timer1_PWM_set_cmp>:

void Timer1_PWM_set_cmp(u8 duty,u32 freq)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	27 97       	sbiw	r28, 0x07	; 7
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	4c 83       	std	Y+4, r20	; 0x04
    13ba:	5d 83       	std	Y+5, r21	; 0x05
    13bc:	6e 83       	std	Y+6, r22	; 0x06
    13be:	7f 83       	std	Y+7, r23	; 0x07
	#if Timer1_Prescaler==_1_prescalar  //mode
		u16 ICR1_value=(8000000/(freq))-1;

	#elif Timer1_Prescaler==_8_prescalar
		u16 ICR1_value=(1000000/(freq))-1;
    13c0:	80 e4       	ldi	r24, 0x40	; 64
    13c2:	92 e4       	ldi	r25, 0x42	; 66
    13c4:	af e0       	ldi	r26, 0x0F	; 15
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ca:	3d 81       	ldd	r19, Y+5	; 0x05
    13cc:	4e 81       	ldd	r20, Y+6	; 0x06
    13ce:	5f 81       	ldd	r21, Y+7	; 0x07
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 16 21 	call	0x422c	; 0x422c <__udivmodsi4>
    13d8:	da 01       	movw	r26, r20
    13da:	c9 01       	movw	r24, r18
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
	#elif Timer1_Prescaler==_1024_prescalar
		u16 ICR1_value=(1000000/(freq*128))-1;

#endif

		ICR1=ICR1_value;
    13e2:	e6 e4       	ldi	r30, 0x46	; 70
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24

	#if Timer1_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR1A=(duty*ICR1_value/100);
    13ee:	ea e4       	ldi	r30, 0x4A	; 74
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	ac 01       	movw	r20, r24
    13fe:	24 9f       	mul	r18, r20
    1400:	c0 01       	movw	r24, r0
    1402:	25 9f       	mul	r18, r21
    1404:	90 0d       	add	r25, r0
    1406:	34 9f       	mul	r19, r20
    1408:	90 0d       	add	r25, r0
    140a:	11 24       	eor	r1, r1
    140c:	24 e6       	ldi	r18, 0x64	; 100
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	b9 01       	movw	r22, r18
    1412:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    1416:	cb 01       	movw	r24, r22
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24

	return ;
}
    141c:	27 96       	adiw	r28, 0x07	; 7
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	0f 92       	push	r0
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	88 23       	and	r24, r24
    143e:	41 f4       	brne	.+16     	; 0x1450 <Timer1_InputCaptureEdge+0x22>
	SET_BIT(TCCR1B,6);
    1440:	ae e4       	ldi	r26, 0x4E	; 78
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ee e4       	ldi	r30, 0x4E	; 78
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 64       	ori	r24, 0x40	; 64
    144c:	8c 93       	st	X, r24
    144e:	0a c0       	rjmp	.+20     	; 0x1464 <Timer1_InputCaptureEdge+0x36>

	else if(edge==FALLING)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	39 f4       	brne	.+14     	; 0x1464 <Timer1_InputCaptureEdge+0x36>
	CLR_BIT(TCCR1B,6);
    1456:	ae e4       	ldi	r26, 0x4E	; 78
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ee e4       	ldi	r30, 0x4E	; 78
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8f 7b       	andi	r24, 0xBF	; 191
    1462:	8c 93       	st	X, r24
}
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <Timer1_OV_InterruptEnable>:

void Timer1_OV_InterruptEnable(void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,2);
    1474:	a9 e5       	ldi	r26, 0x59	; 89
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e9 e5       	ldi	r30, 0x59	; 89
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	84 60       	ori	r24, 0x04	; 4
    1480:	8c 93       	st	X, r24
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <Timer1_OV_InterruptDisable>:
void Timer1_OV_InterruptDisable(void)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,2);
    1490:	a9 e5       	ldi	r26, 0x59	; 89
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e9 e5       	ldi	r30, 0x59	; 89
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8b 7f       	andi	r24, 0xFB	; 251
    149c:	8c 93       	st	X, r24
}
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,4);
    14ac:	a9 e5       	ldi	r26, 0x59	; 89
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e9 e5       	ldi	r30, 0x59	; 89
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 61       	ori	r24, 0x10	; 16
    14b8:	8c 93       	st	X, r24
}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,4);
    14c8:	a9 e5       	ldi	r26, 0x59	; 89
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e9 e5       	ldi	r30, 0x59	; 89
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7e       	andi	r24, 0xEF	; 239
    14d4:	8c 93       	st	X, r24
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,3);
    14e4:	a9 e5       	ldi	r26, 0x59	; 89
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e9 e5       	ldi	r30, 0x59	; 89
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	88 60       	ori	r24, 0x08	; 8
    14f0:	8c 93       	st	X, r24
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,3);
    1500:	a9 e5       	ldi	r26, 0x59	; 89
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e9 e5       	ldi	r30, 0x59	; 89
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	87 7f       	andi	r24, 0xF7	; 247
    150c:	8c 93       	st	X, r24
}
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <Timer1_ICU_InterruptEnable>:
void Timer1_ICU_InterruptEnable(void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    151c:	a9 e5       	ldi	r26, 0x59	; 89
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e9 e5       	ldi	r30, 0x59	; 89
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 62       	ori	r24, 0x20	; 32
    1528:	8c 93       	st	X, r24
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,5);
    1538:	a9 e5       	ldi	r26, 0x59	; 89
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e9 e5       	ldi	r30, 0x59	; 89
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8f 7d       	andi	r24, 0xDF	; 223
    1544:	8c 93       	st	X, r24
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <Timer1_OV_set_callbck>:

void Timer1_OV_set_callbck(void (*p2f_var)(void))
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <Timer1_OV_set_callbck+0x6>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	31 f0       	breq	.+12     	; 0x156e <Timer1_OV_set_callbck+0x22>
	{
		p2f_OV=p2f_var;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	90 93 af 01 	sts	0x01AF, r25
    156a:	80 93 ae 01 	sts	0x01AE, r24
	}
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <Timer1_OCA_set_callbck>:

void Timer1_OCA_set_callbck(void (*p2f_var)(void))
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <Timer1_OCA_set_callbck+0x6>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	31 f0       	breq	.+12     	; 0x159a <Timer1_OCA_set_callbck+0x22>
	{
		p2f_OCA=p2f_var;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	90 93 b1 01 	sts	0x01B1, r25
    1596:	80 93 b0 01 	sts	0x01B0, r24
	}
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <Timer1_OCB_set_callbck>:

void Timer1_OCB_set_callbck(void (*p2f_var)(void))
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <Timer1_OCB_set_callbck+0x6>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	31 f0       	breq	.+12     	; 0x15c6 <Timer1_OCB_set_callbck+0x22>
	{
		p2f_OCB=p2f_var;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	90 93 b3 01 	sts	0x01B3, r25
    15c2:	80 93 b2 01 	sts	0x01B2, r24
	}
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <Timer1_ICU_set_callbck>:

void Timer1_ICU_set_callbck(void (*p2f_var)(void))
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <Timer1_ICU_set_callbck+0x6>
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <Timer1_ICU_set_callbck+0x22>
	{
		p2f_ICU=p2f_var;
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	90 93 b5 01 	sts	0x01B5, r25
    15ee:	80 93 b4 01 	sts	0x01B4, r24
	}
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	p2f_OV();
    1626:	e0 91 ae 01 	lds	r30, 0x01AE
    162a:	f0 91 af 01 	lds	r31, 0x01AF
    162e:	09 95       	icall
}
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	p2f_OCB();
    1680:	e0 91 b2 01 	lds	r30, 0x01B2
    1684:	f0 91 b3 01 	lds	r31, 0x01B3
    1688:	09 95       	icall
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	2f 93       	push	r18
    16bc:	3f 93       	push	r19
    16be:	4f 93       	push	r20
    16c0:	5f 93       	push	r21
    16c2:	6f 93       	push	r22
    16c4:	7f 93       	push	r23
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	af 93       	push	r26
    16cc:	bf 93       	push	r27
    16ce:	ef 93       	push	r30
    16d0:	ff 93       	push	r31
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	p2f_OCB();
    16da:	e0 91 b2 01 	lds	r30, 0x01B2
    16de:	f0 91 b3 01 	lds	r31, 0x01B3
    16e2:	09 95       	icall
}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	ff 91       	pop	r31
    16ea:	ef 91       	pop	r30
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
    1714:	2f 93       	push	r18
    1716:	3f 93       	push	r19
    1718:	4f 93       	push	r20
    171a:	5f 93       	push	r21
    171c:	6f 93       	push	r22
    171e:	7f 93       	push	r23
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	af 93       	push	r26
    1726:	bf 93       	push	r27
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	p2f_ICU();
    1734:	e0 91 b4 01 	lds	r30, 0x01B4
    1738:	f0 91 b5 01 	lds	r31, 0x01B5
    173c:	09 95       	icall
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <Timer0_init>:

void (*p2f_ov)()=NULL_PTR;
void (*p2f_cmp)()=NULL_PTR;

void Timer0_init(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
#elif Timer0_mode==PWM_mode
	SET_BIT(TCCR0,6);
	CLR_BIT(TCCR0,3);

#elif Timer0_mode==CTC_mode
	CLR_BIT(TCCR0,6);
    176c:	a3 e5       	ldi	r26, 0x53	; 83
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e3 e5       	ldi	r30, 0x53	; 83
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7b       	andi	r24, 0xBF	; 191
    1778:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    177a:	a3 e5       	ldi	r26, 0x53	; 83
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 e5       	ldi	r30, 0x53	; 83
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 60       	ori	r24, 0x08	; 8
    1786:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
	SET_BIT(TCCR0,3);

#endif
	return;
}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <Timer0_start>:

void Timer0_start(void)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xf8;
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	88 7f       	andi	r24, 0xF8	; 248
    17a2:	8c 93       	st	X, r24
	TCCR0 |=Timer0_Prescaler;
    17a4:	a3 e5       	ldi	r26, 0x53	; 83
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e3 e5       	ldi	r30, 0x53	; 83
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	82 60       	ori	r24, 0x02	; 2
    17b0:	8c 93       	st	X, r24
	return;
}
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <Timer0_stop>:

void Timer0_stop(void)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xf8;
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	88 7f       	andi	r24, 0xF8	; 248
    17cc:	8c 93       	st	X, r24
	return;
}
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <Timer0_set_int_value>:

void Timer0_set_int_value(u8 value)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	0f 92       	push	r0
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=value;
    17e0:	e2 e5       	ldi	r30, 0x52	; 82
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	80 83       	st	Z, r24
	return ;
}
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <Timer0_set_cmp_value>:

void Timer0_set_cmp_value(u8 value)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	0f 92       	push	r0
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	89 83       	std	Y+1, r24	; 0x01
	OCR0=value;
    17fc:	ec e5       	ldi	r30, 0x5C	; 92
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	80 83       	st	Z, r24
	return ;
}
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <Timer0_PWM_set_cmp>:

void Timer0_PWM_set_cmp(u8 duty)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	0f 92       	push	r0
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	89 83       	std	Y+1, r24	; 0x01
	#if Timer0_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR0=(duty*resoultion/100)-1;
    1818:	ec e5       	ldi	r30, 0x5C	; 92
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	98 2f       	mov	r25, r24
    1824:	88 27       	eor	r24, r24
    1826:	24 e6       	ldi	r18, 0x64	; 100
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	b9 01       	movw	r22, r18
    182c:	0e 94 03 21 	call	0x4206	; 0x4206 <__divmodhi4>
    1830:	cb 01       	movw	r24, r22
    1832:	81 50       	subi	r24, 0x01	; 1
    1834:	80 83       	st	Z, r24

	return ;
}
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <Timer0_PWM_set_cmp_PC>:

void Timer0_PWM_set_cmp_PC (u8 duty)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	89 83       	std	Y+1, r24	; 0x01
	#if Timer0_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR0 = ((duty*resoultion/50)-1);
    184a:	ec e5       	ldi	r30, 0x5C	; 92
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	98 2f       	mov	r25, r24
    1856:	88 27       	eor	r24, r24
    1858:	22 e3       	ldi	r18, 0x32	; 50
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	b9 01       	movw	r22, r18
    185e:	0e 94 03 21 	call	0x4206	; 0x4206 <__divmodhi4>
    1862:	cb 01       	movw	r24, r22
    1864:	81 50       	subi	r24, 0x01	; 1
    1866:	80 83       	st	Z, r24
	return ;
}
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <Timer0_OV_InterruptEnable>:

void Timer0_OV_InterruptEnable(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    1878:	a9 e5       	ldi	r26, 0x59	; 89
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e9 e5       	ldi	r30, 0x59	; 89
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	81 60       	ori	r24, 0x01	; 1
    1884:	8c 93       	st	X, r24
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    1894:	a9 e5       	ldi	r26, 0x59	; 89
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e9 e5       	ldi	r30, 0x59	; 89
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8e 7f       	andi	r24, 0xFE	; 254
    18a0:	8c 93       	st	X, r24
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    18b0:	a9 e5       	ldi	r26, 0x59	; 89
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e9 e5       	ldi	r30, 0x59	; 89
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	82 60       	ori	r24, 0x02	; 2
    18bc:	8c 93       	st	X, r24
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <Timer0_OC_InterruptDisable>:
void Timer0_OC_InterruptDisable(void)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    18cc:	a9 e5       	ldi	r26, 0x59	; 89
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e9 e5       	ldi	r30, 0x59	; 89
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8d 7f       	andi	r24, 0xFD	; 253
    18d8:	8c 93       	st	X, r24
}
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <Timer0_OV_set_callbck>:

void Timer0_OV_set_callbck(void (*p2f_var)(void))
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <Timer0_OV_set_callbck+0x6>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	31 f0       	breq	.+12     	; 0x1902 <Timer0_OV_set_callbck+0x22>
	{
		p2f_ov=p2f_var;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	90 93 b7 01 	sts	0x01B7, r25
    18fe:	80 93 b6 01 	sts	0x01B6, r24
	}
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <Timer0_OC_set_callbck>:

void Timer0_OC_set_callbck(void (*p2f_var)(void))
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <Timer0_OC_set_callbck+0x6>
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	9a 83       	std	Y+2, r25	; 0x02
    1918:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	9a 81       	ldd	r25, Y+2	; 0x02
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	31 f0       	breq	.+12     	; 0x192e <Timer0_OC_set_callbck+0x22>
	{
		p2f_cmp=p2f_var;
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	90 93 b9 01 	sts	0x01B9, r25
    192a:	80 93 b8 01 	sts	0x01B8, r24
	}
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1938:	1f 92       	push	r1
    193a:	0f 92       	push	r0
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	p2f_ov();
    1962:	e0 91 b6 01 	lds	r30, 0x01B6
    1966:	f0 91 b7 01 	lds	r31, 0x01B7
    196a:	09 95       	icall
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
	p2f_cmp();
    19bc:	e0 91 b8 01 	lds	r30, 0x01B8
    19c0:	f0 91 b9 01 	lds	r31, 0x01B9
    19c4:	09 95       	icall
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <ICU_init>:

#include "Timer/ICU/ICU_Interface.h"
#include "Timer/ICU_Cfg.h"

void ICU_init(void)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,0);
    19f4:	af e4       	ldi	r26, 0x4F	; 79
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ef e4       	ldi	r30, 0x4F	; 79
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8e 7f       	andi	r24, 0xFE	; 254
    1a00:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    1a02:	af e4       	ldi	r26, 0x4F	; 79
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	ef e4       	ldi	r30, 0x4F	; 79
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8d 7f       	andi	r24, 0xFD	; 253
    1a0e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    1a10:	ae e4       	ldi	r26, 0x4E	; 78
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ee e4       	ldi	r30, 0x4E	; 78
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	87 7f       	andi	r24, 0xF7	; 247
    1a1c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    1a1e:	ae e4       	ldi	r26, 0x4E	; 78
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ee e4       	ldi	r30, 0x4E	; 78
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8f 7e       	andi	r24, 0xEF	; 239
    1a2a:	8c 93       	st	X, r24

#if ICU_Starting_Edge==ICU_Rising_edge
	SET_BIT(TCCR1B,6);
    1a2c:	ae e4       	ldi	r26, 0x4E	; 78
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ee e4       	ldi	r30, 0x4E	; 78
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 64       	ori	r24, 0x40	; 64
    1a38:	8c 93       	st	X, r24
#elif ICU_Starting_Edge==ICU_falling_edge
	CLR_BIT(TCCR1B,6);
#endif

	SET_BIT(TIMSK,5);
    1a3a:	a9 e5       	ldi	r26, 0x59	; 89
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e9 e5       	ldi	r30, 0x59	; 89
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	80 62       	ori	r24, 0x20	; 32
    1a46:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,0);
    1a48:	ae e4       	ldi	r26, 0x4E	; 78
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ee e4       	ldi	r30, 0x4E	; 78
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	81 60       	ori	r24, 0x01	; 1
    1a54:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    1a56:	ae e4       	ldi	r26, 0x4E	; 78
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ee e4       	ldi	r30, 0x4E	; 78
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	82 60       	ori	r24, 0x02	; 2
    1a62:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    1a64:	ae e4       	ldi	r26, 0x4E	; 78
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	ee e4       	ldi	r30, 0x4E	; 78
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8b 7f       	andi	r24, 0xFB	; 251
    1a70:	8c 93       	st	X, r24
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <ICU_get_Duty_Cycle>:

void ICU_get_Duty_Cycle(u8 * duty)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <ICU_get_Duty_Cycle+0x6>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01

}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <ICU_get_Frequency>:

void ICU_get_Frequency(u32 * frequency)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <ICU_get_Frequency+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01

}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <GIE_Enable>:
#include "MemMap.h"
#include "UTILS.h"
#include "GI/GI_Interface.h"

void GIE_Enable(void)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1ab0:	af e5       	ldi	r26, 0x5F	; 95
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ef e5       	ldi	r30, 0x5F	; 95
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 68       	ori	r24, 0x80	; 128
    1abc:	8c 93       	st	X, r24
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <GIE_Disable>:

void GIE_Disable(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1acc:	af e5       	ldi	r26, 0x5F	; 95
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ef e5       	ldi	r30, 0x5F	; 95
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 77       	andi	r24, 0x7F	; 127
    1ad8:	8c 93       	st	X, r24
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <DIO_InitPin>:
#include "DIO/DIO_Inteface.h"
#include "DIO/DIO_Private.h"
#include "DIO/DIO_Cfg.h"

static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type direction)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	28 97       	sbiw	r28, 0x08	; 8
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	6a 83       	std	Y+2, r22	; 0x02
	if(direction==OUTPUT)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	88 23       	and	r24, r24
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <DIO_InitPin+0x20>
    1afe:	d9 c0       	rjmp	.+434    	; 0x1cb2 <DIO_InitPin+0x1d2>
	{
		switch (pin/8)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	86 95       	lsr	r24
    1b04:	86 95       	lsr	r24
    1b06:	86 95       	lsr	r24
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	38 87       	std	Y+8, r19	; 0x08
    1b0e:	2f 83       	std	Y+7, r18	; 0x07
    1b10:	8f 81       	ldd	r24, Y+7	; 0x07
    1b12:	98 85       	ldd	r25, Y+8	; 0x08
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	91 05       	cpc	r25, r1
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <DIO_InitPin+0x3c>
    1b1a:	44 c0       	rjmp	.+136    	; 0x1ba4 <DIO_InitPin+0xc4>
    1b1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b1e:	38 85       	ldd	r19, Y+8	; 0x08
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <DIO_InitPin+0x50>
    1b26:	8f 81       	ldd	r24, Y+7	; 0x07
    1b28:	98 85       	ldd	r25, Y+8	; 0x08
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	71 f0       	breq	.+28     	; 0x1b4a <DIO_InitPin+0x6a>
    1b2e:	7e c2       	rjmp	.+1276   	; 0x202c <DIO_InitPin+0x54c>
    1b30:	2f 81       	ldd	r18, Y+7	; 0x07
    1b32:	38 85       	ldd	r19, Y+8	; 0x08
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <DIO_InitPin+0x5c>
    1b3a:	61 c0       	rjmp	.+194    	; 0x1bfe <DIO_InitPin+0x11e>
    1b3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3e:	98 85       	ldd	r25, Y+8	; 0x08
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <DIO_InitPin+0x68>
    1b46:	88 c0       	rjmp	.+272    	; 0x1c58 <DIO_InitPin+0x178>
    1b48:	71 c2       	rjmp	.+1250   	; 0x202c <DIO_InitPin+0x54c>
		{
			case PA :
			SET_BIT(DDRA,pin%8);
    1b4a:	aa e3       	ldi	r26, 0x3A	; 58
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ea e3       	ldi	r30, 0x3A	; 58
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 01       	movw	r18, r24
    1b5e:	27 70       	andi	r18, 0x07	; 7
    1b60:	30 70       	andi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_InitPin+0x8c>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	2a 95       	dec	r18
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_InitPin+0x88>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin%8);
    1b74:	ab e3       	ldi	r26, 0x3B	; 59
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	eb e3       	ldi	r30, 0x3B	; 59
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9c 01       	movw	r18, r24
    1b88:	27 70       	andi	r18, 0x07	; 7
    1b8a:	30 70       	andi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_InitPin+0xb8>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_InitPin+0xb4>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	44 c2       	rjmp	.+1160   	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PB :
			SET_BIT(DDRB,pin%8);
    1ba4:	a7 e3       	ldi	r26, 0x37	; 55
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e7 e3       	ldi	r30, 0x37	; 55
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9c 01       	movw	r18, r24
    1bb8:	27 70       	andi	r18, 0x07	; 7
    1bba:	30 70       	andi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_InitPin+0xe6>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	2a 95       	dec	r18
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_InitPin+0xe2>
    1bca:	84 2b       	or	r24, r20
    1bcc:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin%8);
    1bce:	a8 e3       	ldi	r26, 0x38	; 56
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e8 e3       	ldi	r30, 0x38	; 56
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9c 01       	movw	r18, r24
    1be2:	27 70       	andi	r18, 0x07	; 7
    1be4:	30 70       	andi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_InitPin+0x112>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_InitPin+0x10e>
    1bf6:	80 95       	com	r24
    1bf8:	84 23       	and	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	17 c2       	rjmp	.+1070   	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PC :
			SET_BIT(DDRC,pin%8);
    1bfe:	a4 e3       	ldi	r26, 0x34	; 52
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e4 e3       	ldi	r30, 0x34	; 52
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9c 01       	movw	r18, r24
    1c12:	27 70       	andi	r18, 0x07	; 7
    1c14:	30 70       	andi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_InitPin+0x140>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	2a 95       	dec	r18
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_InitPin+0x13c>
    1c24:	84 2b       	or	r24, r20
    1c26:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin%8);
    1c28:	a5 e3       	ldi	r26, 0x35	; 53
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e5 e3       	ldi	r30, 0x35	; 53
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	27 70       	andi	r18, 0x07	; 7
    1c3e:	30 70       	andi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_InitPin+0x16c>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_InitPin+0x168>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	ea c1       	rjmp	.+980    	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PD :
			SET_BIT(DDRD,pin%8);
    1c58:	a1 e3       	ldi	r26, 0x31	; 49
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e1 e3       	ldi	r30, 0x31	; 49
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	27 70       	andi	r18, 0x07	; 7
    1c6e:	30 70       	andi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_InitPin+0x19a>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	2a 95       	dec	r18
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <DIO_InitPin+0x196>
    1c7e:	84 2b       	or	r24, r20
    1c80:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin%8);
    1c82:	a2 e3       	ldi	r26, 0x32	; 50
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e2 e3       	ldi	r30, 0x32	; 50
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9c 01       	movw	r18, r24
    1c96:	27 70       	andi	r18, 0x07	; 7
    1c98:	30 70       	andi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <DIO_InitPin+0x1c6>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <DIO_InitPin+0x1c2>
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	bd c1       	rjmp	.+890    	; 0x202c <DIO_InitPin+0x54c>
			break;
		}
	}
	else if(direction==INFREE)
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <DIO_InitPin+0x1da>
    1cb8:	dd c0       	rjmp	.+442    	; 0x1e74 <DIO_InitPin+0x394>
	{
		switch (pin/8)
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	86 95       	lsr	r24
    1cbe:	86 95       	lsr	r24
    1cc0:	86 95       	lsr	r24
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3e 83       	std	Y+6, r19	; 0x06
    1cc8:	2d 83       	std	Y+5, r18	; 0x05
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <DIO_InitPin+0x1f6>
    1cd4:	45 c0       	rjmp	.+138    	; 0x1d60 <DIO_InitPin+0x280>
    1cd6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	2c f4       	brge	.+10     	; 0x1cea <DIO_InitPin+0x20a>
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	71 f0       	breq	.+28     	; 0x1d04 <DIO_InitPin+0x224>
    1ce8:	a1 c1       	rjmp	.+834    	; 0x202c <DIO_InitPin+0x54c>
    1cea:	2d 81       	ldd	r18, Y+5	; 0x05
    1cec:	3e 81       	ldd	r19, Y+6	; 0x06
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <DIO_InitPin+0x216>
    1cf4:	63 c0       	rjmp	.+198    	; 0x1dbc <DIO_InitPin+0x2dc>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <DIO_InitPin+0x222>
    1d00:	8b c0       	rjmp	.+278    	; 0x1e18 <DIO_InitPin+0x338>
    1d02:	94 c1       	rjmp	.+808    	; 0x202c <DIO_InitPin+0x54c>
		{
			case PA :
			CLR_BIT(DDRA,pin%8);
    1d04:	aa e3       	ldi	r26, 0x3A	; 58
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ea e3       	ldi	r30, 0x3A	; 58
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 01       	movw	r18, r24
    1d18:	27 70       	andi	r18, 0x07	; 7
    1d1a:	30 70       	andi	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_InitPin+0x246>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	2a 95       	dec	r18
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_InitPin+0x242>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin%8);
    1d30:	ab e3       	ldi	r26, 0x3B	; 59
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	eb e3       	ldi	r30, 0x3B	; 59
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 01       	movw	r18, r24
    1d44:	27 70       	andi	r18, 0x07	; 7
    1d46:	30 70       	andi	r19, 0x00	; 0
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <DIO_InitPin+0x274>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	0a 94       	dec	r0
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <DIO_InitPin+0x270>
    1d58:	80 95       	com	r24
    1d5a:	84 23       	and	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	66 c1       	rjmp	.+716    	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PB :
			CLR_BIT(DDRB,pin%8);
    1d60:	a7 e3       	ldi	r26, 0x37	; 55
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e7 e3       	ldi	r30, 0x37	; 55
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 01       	movw	r18, r24
    1d74:	27 70       	andi	r18, 0x07	; 7
    1d76:	30 70       	andi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_InitPin+0x2a2>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	2a 95       	dec	r18
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_InitPin+0x29e>
    1d86:	80 95       	com	r24
    1d88:	84 23       	and	r24, r20
    1d8a:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin%8);
    1d8c:	a8 e3       	ldi	r26, 0x38	; 56
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e8 e3       	ldi	r30, 0x38	; 56
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 01       	movw	r18, r24
    1da0:	27 70       	andi	r18, 0x07	; 7
    1da2:	30 70       	andi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 2e       	mov	r0, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_InitPin+0x2d0>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	0a 94       	dec	r0
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <DIO_InitPin+0x2cc>
    1db4:	80 95       	com	r24
    1db6:	84 23       	and	r24, r20
    1db8:	8c 93       	st	X, r24
    1dba:	38 c1       	rjmp	.+624    	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PC :
			CLR_BIT(DDRC,pin%8);
    1dbc:	a4 e3       	ldi	r26, 0x34	; 52
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e4 e3       	ldi	r30, 0x34	; 52
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	48 2f       	mov	r20, r24
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 01       	movw	r18, r24
    1dd0:	27 70       	andi	r18, 0x07	; 7
    1dd2:	30 70       	andi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_InitPin+0x2fe>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	2a 95       	dec	r18
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <DIO_InitPin+0x2fa>
    1de2:	80 95       	com	r24
    1de4:	84 23       	and	r24, r20
    1de6:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin%8);
    1de8:	a5 e3       	ldi	r26, 0x35	; 53
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e5 e3       	ldi	r30, 0x35	; 53
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9c 01       	movw	r18, r24
    1dfc:	27 70       	andi	r18, 0x07	; 7
    1dfe:	30 70       	andi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_InitPin+0x32c>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <DIO_InitPin+0x328>
    1e10:	80 95       	com	r24
    1e12:	84 23       	and	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	0a c1       	rjmp	.+532    	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PD :
			CLR_BIT(DDRD,pin%8);
    1e18:	a1 e3       	ldi	r26, 0x31	; 49
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e1 e3       	ldi	r30, 0x31	; 49
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	27 70       	andi	r18, 0x07	; 7
    1e2e:	30 70       	andi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_InitPin+0x35a>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	2a 95       	dec	r18
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_InitPin+0x356>
    1e3e:	80 95       	com	r24
    1e40:	84 23       	and	r24, r20
    1e42:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin%8);
    1e44:	a2 e3       	ldi	r26, 0x32	; 50
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e2 e3       	ldi	r30, 0x32	; 50
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 01       	movw	r18, r24
    1e58:	27 70       	andi	r18, 0x07	; 7
    1e5a:	30 70       	andi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_InitPin+0x388>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <DIO_InitPin+0x384>
    1e6c:	80 95       	com	r24
    1e6e:	84 23       	and	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	dc c0       	rjmp	.+440    	; 0x202c <DIO_InitPin+0x54c>
			break;
		}
	}
	else if(direction==INPULL)
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	82 30       	cpi	r24, 0x02	; 2
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <DIO_InitPin+0x39c>
    1e7a:	d8 c0       	rjmp	.+432    	; 0x202c <DIO_InitPin+0x54c>
	{
		switch (pin/8)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	86 95       	lsr	r24
    1e80:	86 95       	lsr	r24
    1e82:	86 95       	lsr	r24
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3c 83       	std	Y+4, r19	; 0x04
    1e8a:	2b 83       	std	Y+3, r18	; 0x03
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <DIO_InitPin+0x3b8>
    1e96:	44 c0       	rjmp	.+136    	; 0x1f20 <DIO_InitPin+0x440>
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <DIO_InitPin+0x3cc>
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	71 f0       	breq	.+28     	; 0x1ec6 <DIO_InitPin+0x3e6>
    1eaa:	c0 c0       	rjmp	.+384    	; 0x202c <DIO_InitPin+0x54c>
    1eac:	2b 81       	ldd	r18, Y+3	; 0x03
    1eae:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <DIO_InitPin+0x3d8>
    1eb6:	61 c0       	rjmp	.+194    	; 0x1f7a <DIO_InitPin+0x49a>
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <DIO_InitPin+0x3e4>
    1ec2:	88 c0       	rjmp	.+272    	; 0x1fd4 <DIO_InitPin+0x4f4>
    1ec4:	b3 c0       	rjmp	.+358    	; 0x202c <DIO_InitPin+0x54c>
		{
			case PA :
			CLR_BIT(DDRA,pin%8);
    1ec6:	aa e3       	ldi	r26, 0x3A	; 58
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ea e3       	ldi	r30, 0x3A	; 58
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9c 01       	movw	r18, r24
    1eda:	27 70       	andi	r18, 0x07	; 7
    1edc:	30 70       	andi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_InitPin+0x408>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	2a 95       	dec	r18
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <DIO_InitPin+0x404>
    1eec:	80 95       	com	r24
    1eee:	84 23       	and	r24, r20
    1ef0:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin%8);
    1ef2:	ab e3       	ldi	r26, 0x3B	; 59
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	eb e3       	ldi	r30, 0x3B	; 59
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9c 01       	movw	r18, r24
    1f06:	27 70       	andi	r18, 0x07	; 7
    1f08:	30 70       	andi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 2e       	mov	r0, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_InitPin+0x436>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_InitPin+0x432>
    1f1a:	84 2b       	or	r24, r20
    1f1c:	8c 93       	st	X, r24
    1f1e:	86 c0       	rjmp	.+268    	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PB :
			CLR_BIT(DDRB,pin%8);
    1f20:	a7 e3       	ldi	r26, 0x37	; 55
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e7 e3       	ldi	r30, 0x37	; 55
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 2f       	mov	r20, r24
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 01       	movw	r18, r24
    1f34:	27 70       	andi	r18, 0x07	; 7
    1f36:	30 70       	andi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <DIO_InitPin+0x462>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	2a 95       	dec	r18
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <DIO_InitPin+0x45e>
    1f46:	80 95       	com	r24
    1f48:	84 23       	and	r24, r20
    1f4a:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin%8);
    1f4c:	a8 e3       	ldi	r26, 0x38	; 56
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e8 e3       	ldi	r30, 0x38	; 56
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	48 2f       	mov	r20, r24
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 01       	movw	r18, r24
    1f60:	27 70       	andi	r18, 0x07	; 7
    1f62:	30 70       	andi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <DIO_InitPin+0x490>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <DIO_InitPin+0x48c>
    1f74:	84 2b       	or	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	59 c0       	rjmp	.+178    	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PC :
			CLR_BIT(DDRC,pin%8);
    1f7a:	a4 e3       	ldi	r26, 0x34	; 52
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e4 e3       	ldi	r30, 0x34	; 52
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 01       	movw	r18, r24
    1f8e:	27 70       	andi	r18, 0x07	; 7
    1f90:	30 70       	andi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_InitPin+0x4bc>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	2a 95       	dec	r18
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_InitPin+0x4b8>
    1fa0:	80 95       	com	r24
    1fa2:	84 23       	and	r24, r20
    1fa4:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin%8);
    1fa6:	a5 e3       	ldi	r26, 0x35	; 53
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e5 e3       	ldi	r30, 0x35	; 53
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9c 01       	movw	r18, r24
    1fba:	27 70       	andi	r18, 0x07	; 7
    1fbc:	30 70       	andi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 2e       	mov	r0, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <DIO_InitPin+0x4ea>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	0a 94       	dec	r0
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <DIO_InitPin+0x4e6>
    1fce:	84 2b       	or	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	2c c0       	rjmp	.+88     	; 0x202c <DIO_InitPin+0x54c>
			break;
			case PD :
			CLR_BIT(DDRD,pin%8);
    1fd4:	a1 e3       	ldi	r26, 0x31	; 49
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e1 e3       	ldi	r30, 0x31	; 49
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9c 01       	movw	r18, r24
    1fe8:	27 70       	andi	r18, 0x07	; 7
    1fea:	30 70       	andi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <DIO_InitPin+0x516>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	2a 95       	dec	r18
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <DIO_InitPin+0x512>
    1ffa:	80 95       	com	r24
    1ffc:	84 23       	and	r24, r20
    1ffe:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin%8);
    2000:	a2 e3       	ldi	r26, 0x32	; 50
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e2 e3       	ldi	r30, 0x32	; 50
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9c 01       	movw	r18, r24
    2014:	27 70       	andi	r18, 0x07	; 7
    2016:	30 70       	andi	r19, 0x00	; 0
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	02 2e       	mov	r0, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <DIO_InitPin+0x544>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <DIO_InitPin+0x540>
    2028:	84 2b       	or	r24, r20
    202a:	8c 93       	st	X, r24
			break;
		}
	}
}
    202c:	28 96       	adiw	r28, 0x08	; 8
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <DIO_Init>:

void DIO_Init(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <DIO_Init+0x6>
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	int length = sizeof(DIO_PinsStatusArr)/sizeof(DIO_PinsStatusArr[0]);
    204a:	80 e2       	ldi	r24, 0x20	; 32
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9b 83       	std	Y+3, r25	; 0x03
    2050:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin_type i;
	for(i =0;i<length;i++)
    2052:	19 82       	std	Y+1, r1	; 0x01
    2054:	19 c0       	rjmp	.+50     	; 0x2088 <DIO_Init+0x4a>
	{
		DIO_InitPin(DIO_PinsStatusArr[i].pin,DIO_PinsStatusArr[i].pin_state);
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	fc 01       	movw	r30, r24
    2062:	e7 59       	subi	r30, 0x97	; 151
    2064:	fe 4f       	sbci	r31, 0xFE	; 254
    2066:	20 81       	ld	r18, Z
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	fc 01       	movw	r30, r24
    2074:	e6 59       	subi	r30, 0x96	; 150
    2076:	fe 4f       	sbci	r31, 0xFE	; 254
    2078:	90 81       	ld	r25, Z
    207a:	82 2f       	mov	r24, r18
    207c:	69 2f       	mov	r22, r25
    207e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_InitPin>

void DIO_Init(void)
{
	int length = sizeof(DIO_PinsStatusArr)/sizeof(DIO_PinsStatusArr[0]);
	DIO_Pin_type i;
	for(i =0;i<length;i++)
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	8f 5f       	subi	r24, 0xFF	; 255
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	9b 81       	ldd	r25, Y+3	; 0x03
    2092:	28 17       	cp	r18, r24
    2094:	39 07       	cpc	r19, r25
    2096:	fc f2       	brlt	.-66     	; 0x2056 <DIO_Init+0x18>
	{
		DIO_InitPin(DIO_PinsStatusArr[i].pin,DIO_PinsStatusArr[i].pin_state);
	}
}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin ,DIO_PinVoltage_type volt)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <DIO_WritePin+0x6>
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <DIO_WritePin+0x8>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <DIO_WritePin+0xa>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	6a 83       	std	Y+2, r22	; 0x02
	if(volt==HIGH)
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	09 f0       	breq	.+2      	; 0x20be <DIO_WritePin+0x1a>
    20bc:	7f c0       	rjmp	.+254    	; 0x21bc <DIO_WritePin+0x118>
	{
		switch (pin/8)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	86 95       	lsr	r24
    20c2:	86 95       	lsr	r24
    20c4:	86 95       	lsr	r24
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	3e 83       	std	Y+6, r19	; 0x06
    20cc:	2d 83       	std	Y+5, r18	; 0x05
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	91 05       	cpc	r25, r1
    20d6:	69 f1       	breq	.+90     	; 0x2132 <DIO_WritePin+0x8e>
    20d8:	2d 81       	ldd	r18, Y+5	; 0x05
    20da:	3e 81       	ldd	r19, Y+6	; 0x06
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	2c f4       	brge	.+10     	; 0x20ec <DIO_WritePin+0x48>
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f0       	breq	.+26     	; 0x2104 <DIO_WritePin+0x60>
    20ea:	ea c0       	rjmp	.+468    	; 0x22c0 <DIO_WritePin+0x21c>
    20ec:	2d 81       	ldd	r18, Y+5	; 0x05
    20ee:	3e 81       	ldd	r19, Y+6	; 0x06
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	a9 f1       	breq	.+106    	; 0x2160 <DIO_WritePin+0xbc>
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	91 05       	cpc	r25, r1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <DIO_WritePin+0x5e>
    2100:	46 c0       	rjmp	.+140    	; 0x218e <DIO_WritePin+0xea>
    2102:	de c0       	rjmp	.+444    	; 0x22c0 <DIO_WritePin+0x21c>
		{
			case PA :
			SET_BIT(PORTA,pin%8);
    2104:	ab e3       	ldi	r26, 0x3B	; 59
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	eb e3       	ldi	r30, 0x3B	; 59
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9c 01       	movw	r18, r24
    2118:	27 70       	andi	r18, 0x07	; 7
    211a:	30 70       	andi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <DIO_WritePin+0x84>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <DIO_WritePin+0x80>
    212c:	84 2b       	or	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	c7 c0       	rjmp	.+398    	; 0x22c0 <DIO_WritePin+0x21c>
			break;
			case PB :
			SET_BIT(PORTB,pin%8);
    2132:	a8 e3       	ldi	r26, 0x38	; 56
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e8 e3       	ldi	r30, 0x38	; 56
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 01       	movw	r18, r24
    2146:	27 70       	andi	r18, 0x07	; 7
    2148:	30 70       	andi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 2e       	mov	r0, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <DIO_WritePin+0xb2>
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <DIO_WritePin+0xae>
    215a:	84 2b       	or	r24, r20
    215c:	8c 93       	st	X, r24
    215e:	b0 c0       	rjmp	.+352    	; 0x22c0 <DIO_WritePin+0x21c>
			break;
			case PC :
			SET_BIT(PORTC,pin%8);
    2160:	a5 e3       	ldi	r26, 0x35	; 53
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e5 e3       	ldi	r30, 0x35	; 53
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	48 2f       	mov	r20, r24
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 01       	movw	r18, r24
    2174:	27 70       	andi	r18, 0x07	; 7
    2176:	30 70       	andi	r19, 0x00	; 0
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 2e       	mov	r0, r18
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <DIO_WritePin+0xe0>
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	0a 94       	dec	r0
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <DIO_WritePin+0xdc>
    2188:	84 2b       	or	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	99 c0       	rjmp	.+306    	; 0x22c0 <DIO_WritePin+0x21c>
			break;
			case PD :
			SET_BIT(PORTD,pin%8);
    218e:	a2 e3       	ldi	r26, 0x32	; 50
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e2 e3       	ldi	r30, 0x32	; 50
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	48 2f       	mov	r20, r24
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9c 01       	movw	r18, r24
    21a2:	27 70       	andi	r18, 0x07	; 7
    21a4:	30 70       	andi	r19, 0x00	; 0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	02 2e       	mov	r0, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <DIO_WritePin+0x10e>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <DIO_WritePin+0x10a>
    21b6:	84 2b       	or	r24, r20
    21b8:	8c 93       	st	X, r24
    21ba:	82 c0       	rjmp	.+260    	; 0x22c0 <DIO_WritePin+0x21c>
			break;
		}
	}
	else
	{
		switch (pin/8)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	86 95       	lsr	r24
    21c0:	86 95       	lsr	r24
    21c2:	86 95       	lsr	r24
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3c 83       	std	Y+4, r19	; 0x04
    21ca:	2b 83       	std	Y+3, r18	; 0x03
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	71 f1       	breq	.+92     	; 0x2232 <DIO_WritePin+0x18e>
    21d6:	2b 81       	ldd	r18, Y+3	; 0x03
    21d8:	3c 81       	ldd	r19, Y+4	; 0x04
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	2c f4       	brge	.+10     	; 0x21ea <DIO_WritePin+0x146>
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f0       	breq	.+26     	; 0x2202 <DIO_WritePin+0x15e>
    21e8:	6b c0       	rjmp	.+214    	; 0x22c0 <DIO_WritePin+0x21c>
    21ea:	2b 81       	ldd	r18, Y+3	; 0x03
    21ec:	3c 81       	ldd	r19, Y+4	; 0x04
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	b9 f1       	breq	.+110    	; 0x2262 <DIO_WritePin+0x1be>
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	91 05       	cpc	r25, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <DIO_WritePin+0x15c>
    21fe:	49 c0       	rjmp	.+146    	; 0x2292 <DIO_WritePin+0x1ee>
    2200:	5f c0       	rjmp	.+190    	; 0x22c0 <DIO_WritePin+0x21c>
		{
			case PA :
			CLR_BIT(PORTA,pin%8);
    2202:	ab e3       	ldi	r26, 0x3B	; 59
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	eb e3       	ldi	r30, 0x3B	; 59
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	48 2f       	mov	r20, r24
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 01       	movw	r18, r24
    2216:	27 70       	andi	r18, 0x07	; 7
    2218:	30 70       	andi	r19, 0x00	; 0
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 2e       	mov	r0, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <DIO_WritePin+0x182>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	0a 94       	dec	r0
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <DIO_WritePin+0x17e>
    222a:	80 95       	com	r24
    222c:	84 23       	and	r24, r20
    222e:	8c 93       	st	X, r24
    2230:	47 c0       	rjmp	.+142    	; 0x22c0 <DIO_WritePin+0x21c>
			break;
			case PB :
			CLR_BIT(PORTB,pin%8);
    2232:	a8 e3       	ldi	r26, 0x38	; 56
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e8 e3       	ldi	r30, 0x38	; 56
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	48 2f       	mov	r20, r24
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 01       	movw	r18, r24
    2246:	27 70       	andi	r18, 0x07	; 7
    2248:	30 70       	andi	r19, 0x00	; 0
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	02 2e       	mov	r0, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <DIO_WritePin+0x1b2>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	0a 94       	dec	r0
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <DIO_WritePin+0x1ae>
    225a:	80 95       	com	r24
    225c:	84 23       	and	r24, r20
    225e:	8c 93       	st	X, r24
    2260:	2f c0       	rjmp	.+94     	; 0x22c0 <DIO_WritePin+0x21c>
			break;
			case PC :
			CLR_BIT(PORTC,pin%8);
    2262:	a5 e3       	ldi	r26, 0x35	; 53
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e5 e3       	ldi	r30, 0x35	; 53
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	48 2f       	mov	r20, r24
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 01       	movw	r18, r24
    2276:	27 70       	andi	r18, 0x07	; 7
    2278:	30 70       	andi	r19, 0x00	; 0
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	02 2e       	mov	r0, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <DIO_WritePin+0x1e2>
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <DIO_WritePin+0x1de>
    228a:	80 95       	com	r24
    228c:	84 23       	and	r24, r20
    228e:	8c 93       	st	X, r24
    2290:	17 c0       	rjmp	.+46     	; 0x22c0 <DIO_WritePin+0x21c>
			break;
			case PD :
			CLR_BIT(PORTD,pin%8);
    2292:	a2 e3       	ldi	r26, 0x32	; 50
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e2 e3       	ldi	r30, 0x32	; 50
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9c 01       	movw	r18, r24
    22a6:	27 70       	andi	r18, 0x07	; 7
    22a8:	30 70       	andi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 2e       	mov	r0, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <DIO_WritePin+0x212>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <DIO_WritePin+0x20e>
    22ba:	80 95       	com	r24
    22bc:	84 23       	and	r24, r20
    22be:	8c 93       	st	X, r24
			break;
		}
	}
}
    22c0:	26 96       	adiw	r28, 0x06	; 6
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <DIO_ReadPin>:

DIO_PinVoltage_type	DIO_ReadPin(DIO_Pin_type pin)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <DIO_ReadPin+0x6>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <DIO_ReadPin+0x8>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type v=LOW;
    22e0:	19 82       	std	Y+1, r1	; 0x01
	switch (pin/8)
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	86 95       	lsr	r24
    22e6:	86 95       	lsr	r24
    22e8:	86 95       	lsr	r24
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	3c 83       	std	Y+4, r19	; 0x04
    22f0:	2b 83       	std	Y+3, r18	; 0x03
    22f2:	4b 81       	ldd	r20, Y+3	; 0x03
    22f4:	5c 81       	ldd	r21, Y+4	; 0x04
    22f6:	41 30       	cpi	r20, 0x01	; 1
    22f8:	51 05       	cpc	r21, r1
    22fa:	59 f1       	breq	.+86     	; 0x2352 <DIO_ReadPin+0x80>
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	82 30       	cpi	r24, 0x02	; 2
    2302:	91 05       	cpc	r25, r1
    2304:	34 f4       	brge	.+12     	; 0x2312 <DIO_ReadPin+0x40>
    2306:	2b 81       	ldd	r18, Y+3	; 0x03
    2308:	3c 81       	ldd	r19, Y+4	; 0x04
    230a:	21 15       	cp	r18, r1
    230c:	31 05       	cpc	r19, r1
    230e:	69 f0       	breq	.+26     	; 0x232a <DIO_ReadPin+0x58>
    2310:	5b c0       	rjmp	.+182    	; 0x23c8 <DIO_ReadPin+0xf6>
    2312:	4b 81       	ldd	r20, Y+3	; 0x03
    2314:	5c 81       	ldd	r21, Y+4	; 0x04
    2316:	42 30       	cpi	r20, 0x02	; 2
    2318:	51 05       	cpc	r21, r1
    231a:	79 f1       	breq	.+94     	; 0x237a <DIO_ReadPin+0xa8>
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	83 30       	cpi	r24, 0x03	; 3
    2322:	91 05       	cpc	r25, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <DIO_ReadPin+0x56>
    2326:	3d c0       	rjmp	.+122    	; 0x23a2 <DIO_ReadPin+0xd0>
    2328:	4f c0       	rjmp	.+158    	; 0x23c8 <DIO_ReadPin+0xf6>
	{
		case PA :
		v=READ_BIT(PINA,pin%8);
    232a:	e9 e3       	ldi	r30, 0x39	; 57
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	87 70       	andi	r24, 0x07	; 7
    233c:	90 70       	andi	r25, 0x00	; 0
    233e:	a9 01       	movw	r20, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <DIO_ReadPin+0x74>
    2342:	55 95       	asr	r21
    2344:	47 95       	ror	r20
    2346:	8a 95       	dec	r24
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <DIO_ReadPin+0x70>
    234a:	ca 01       	movw	r24, r20
    234c:	81 70       	andi	r24, 0x01	; 1
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	3b c0       	rjmp	.+118    	; 0x23c8 <DIO_ReadPin+0xf6>
		break;
		case PB :
		v=READ_BIT(PINB,pin%8);
    2352:	e6 e3       	ldi	r30, 0x36	; 54
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	87 70       	andi	r24, 0x07	; 7
    2364:	90 70       	andi	r25, 0x00	; 0
    2366:	a9 01       	movw	r20, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <DIO_ReadPin+0x9c>
    236a:	55 95       	asr	r21
    236c:	47 95       	ror	r20
    236e:	8a 95       	dec	r24
    2370:	e2 f7       	brpl	.-8      	; 0x236a <DIO_ReadPin+0x98>
    2372:	ca 01       	movw	r24, r20
    2374:	81 70       	andi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	27 c0       	rjmp	.+78     	; 0x23c8 <DIO_ReadPin+0xf6>
		break;
		case PC :
		v=READ_BIT(PINC,pin%8);
    237a:	e3 e3       	ldi	r30, 0x33	; 51
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	87 70       	andi	r24, 0x07	; 7
    238c:	90 70       	andi	r25, 0x00	; 0
    238e:	a9 01       	movw	r20, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <DIO_ReadPin+0xc4>
    2392:	55 95       	asr	r21
    2394:	47 95       	ror	r20
    2396:	8a 95       	dec	r24
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <DIO_ReadPin+0xc0>
    239a:	ca 01       	movw	r24, r20
    239c:	81 70       	andi	r24, 0x01	; 1
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	13 c0       	rjmp	.+38     	; 0x23c8 <DIO_ReadPin+0xf6>
		break;
		case PD :
		v=READ_BIT(PIND,pin%8);
    23a2:	e0 e3       	ldi	r30, 0x30	; 48
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	87 70       	andi	r24, 0x07	; 7
    23b4:	90 70       	andi	r25, 0x00	; 0
    23b6:	a9 01       	movw	r20, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <DIO_ReadPin+0xec>
    23ba:	55 95       	asr	r21
    23bc:	47 95       	ror	r20
    23be:	8a 95       	dec	r24
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <DIO_ReadPin+0xe8>
    23c2:	ca 01       	movw	r24, r20
    23c4:	81 70       	andi	r24, 0x01	; 1
    23c6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return v;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <DIO_TogglePin+0x6>
    23de:	0f 92       	push	r0
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	89 83       	std	Y+1, r24	; 0x01
	switch (pin/8)
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	86 95       	lsr	r24
    23ea:	86 95       	lsr	r24
    23ec:	86 95       	lsr	r24
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	3b 83       	std	Y+3, r19	; 0x03
    23f4:	2a 83       	std	Y+2, r18	; 0x02
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	9b 81       	ldd	r25, Y+3	; 0x03
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	91 05       	cpc	r25, r1
    23fe:	69 f1       	breq	.+90     	; 0x245a <DIO_TogglePin+0x82>
    2400:	2a 81       	ldd	r18, Y+2	; 0x02
    2402:	3b 81       	ldd	r19, Y+3	; 0x03
    2404:	22 30       	cpi	r18, 0x02	; 2
    2406:	31 05       	cpc	r19, r1
    2408:	2c f4       	brge	.+10     	; 0x2414 <DIO_TogglePin+0x3c>
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f0       	breq	.+26     	; 0x242c <DIO_TogglePin+0x54>
    2412:	67 c0       	rjmp	.+206    	; 0x24e2 <DIO_TogglePin+0x10a>
    2414:	2a 81       	ldd	r18, Y+2	; 0x02
    2416:	3b 81       	ldd	r19, Y+3	; 0x03
    2418:	22 30       	cpi	r18, 0x02	; 2
    241a:	31 05       	cpc	r19, r1
    241c:	a9 f1       	breq	.+106    	; 0x2488 <DIO_TogglePin+0xb0>
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	9b 81       	ldd	r25, Y+3	; 0x03
    2422:	83 30       	cpi	r24, 0x03	; 3
    2424:	91 05       	cpc	r25, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <DIO_TogglePin+0x52>
    2428:	46 c0       	rjmp	.+140    	; 0x24b6 <DIO_TogglePin+0xde>
    242a:	5b c0       	rjmp	.+182    	; 0x24e2 <DIO_TogglePin+0x10a>
	{
		case PA :
		TOG_BIT(PORTA,pin%8);
    242c:	ab e3       	ldi	r26, 0x3B	; 59
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	eb e3       	ldi	r30, 0x3B	; 59
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	48 2f       	mov	r20, r24
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 01       	movw	r18, r24
    2440:	27 70       	andi	r18, 0x07	; 7
    2442:	30 70       	andi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 2e       	mov	r0, r18
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <DIO_TogglePin+0x78>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <DIO_TogglePin+0x74>
    2454:	84 27       	eor	r24, r20
    2456:	8c 93       	st	X, r24
    2458:	44 c0       	rjmp	.+136    	; 0x24e2 <DIO_TogglePin+0x10a>
		break;
		case PB :
		TOG_BIT(PORTB,pin%8);
    245a:	a8 e3       	ldi	r26, 0x38	; 56
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e8 e3       	ldi	r30, 0x38	; 56
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	48 2f       	mov	r20, r24
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9c 01       	movw	r18, r24
    246e:	27 70       	andi	r18, 0x07	; 7
    2470:	30 70       	andi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <DIO_TogglePin+0xa6>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <DIO_TogglePin+0xa2>
    2482:	84 27       	eor	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	2d c0       	rjmp	.+90     	; 0x24e2 <DIO_TogglePin+0x10a>
		break;
		case PC :
		TOG_BIT(PORTC,pin%8);
    2488:	a5 e3       	ldi	r26, 0x35	; 53
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e5 e3       	ldi	r30, 0x35	; 53
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	48 2f       	mov	r20, r24
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9c 01       	movw	r18, r24
    249c:	27 70       	andi	r18, 0x07	; 7
    249e:	30 70       	andi	r19, 0x00	; 0
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 2e       	mov	r0, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_TogglePin+0xd4>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0a 94       	dec	r0
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <DIO_TogglePin+0xd0>
    24b0:	84 27       	eor	r24, r20
    24b2:	8c 93       	st	X, r24
    24b4:	16 c0       	rjmp	.+44     	; 0x24e2 <DIO_TogglePin+0x10a>
		break;
		case PD :
		TOG_BIT(PORTD,pin%8);
    24b6:	a2 e3       	ldi	r26, 0x32	; 50
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e2 e3       	ldi	r30, 0x32	; 50
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	48 2f       	mov	r20, r24
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9c 01       	movw	r18, r24
    24ca:	27 70       	andi	r18, 0x07	; 7
    24cc:	30 70       	andi	r19, 0x00	; 0
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 2e       	mov	r0, r18
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <DIO_TogglePin+0x102>
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	0a 94       	dec	r0
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <DIO_TogglePin+0xfe>
    24de:	84 27       	eor	r24, r20
    24e0:	8c 93       	st	X, r24
		break;
	}
}
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port,u8 data)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <DIO_WritePort+0x6>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <DIO_WritePort+0x8>
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3c 83       	std	Y+4, r19	; 0x04
    2506:	2b 83       	std	Y+3, r18	; 0x03
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	d1 f0       	breq	.+52     	; 0x2546 <DIO_WritePort+0x58>
    2512:	2b 81       	ldd	r18, Y+3	; 0x03
    2514:	3c 81       	ldd	r19, Y+4	; 0x04
    2516:	22 30       	cpi	r18, 0x02	; 2
    2518:	31 05       	cpc	r19, r1
    251a:	2c f4       	brge	.+10     	; 0x2526 <DIO_WritePort+0x38>
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	61 f0       	breq	.+24     	; 0x253c <DIO_WritePort+0x4e>
    2524:	1e c0       	rjmp	.+60     	; 0x2562 <DIO_WritePort+0x74>
    2526:	2b 81       	ldd	r18, Y+3	; 0x03
    2528:	3c 81       	ldd	r19, Y+4	; 0x04
    252a:	22 30       	cpi	r18, 0x02	; 2
    252c:	31 05       	cpc	r19, r1
    252e:	81 f0       	breq	.+32     	; 0x2550 <DIO_WritePort+0x62>
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	83 30       	cpi	r24, 0x03	; 3
    2536:	91 05       	cpc	r25, r1
    2538:	81 f0       	breq	.+32     	; 0x255a <DIO_WritePort+0x6c>
    253a:	13 c0       	rjmp	.+38     	; 0x2562 <DIO_WritePort+0x74>
	{
		case PA :
		PORTA=data;
    253c:	eb e3       	ldi	r30, 0x3B	; 59
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	80 83       	st	Z, r24
    2544:	0e c0       	rjmp	.+28     	; 0x2562 <DIO_WritePort+0x74>
		break;
		case PB :
		PORTB=data;
    2546:	e8 e3       	ldi	r30, 0x38	; 56
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	80 83       	st	Z, r24
    254e:	09 c0       	rjmp	.+18     	; 0x2562 <DIO_WritePort+0x74>
		break;
		case PC :
		PORTC=data;
    2550:	e5 e3       	ldi	r30, 0x35	; 53
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	80 83       	st	Z, r24
    2558:	04 c0       	rjmp	.+8      	; 0x2562 <DIO_WritePort+0x74>
		break;
		case PD :
		PORTD=data;
    255a:	e2 e3       	ldi	r30, 0x32	; 50
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	80 83       	st	Z, r24
		break;
	}
}
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <DIO_ReadPort>:

u8 DIO_ReadPort(DIO_Port_type port)
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	00 d0       	rcall	.+0      	; 0x2576 <DIO_ReadPort+0x6>
    2576:	00 d0       	rcall	.+0      	; 0x2578 <DIO_ReadPort+0x8>
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	8a 83       	std	Y+2, r24	; 0x02
	u8 data=0;
    257e:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	3c 83       	std	Y+4, r19	; 0x04
    2588:	2b 83       	std	Y+3, r18	; 0x03
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	91 05       	cpc	r25, r1
    2592:	d1 f0       	breq	.+52     	; 0x25c8 <DIO_ReadPort+0x58>
    2594:	2b 81       	ldd	r18, Y+3	; 0x03
    2596:	3c 81       	ldd	r19, Y+4	; 0x04
    2598:	22 30       	cpi	r18, 0x02	; 2
    259a:	31 05       	cpc	r19, r1
    259c:	2c f4       	brge	.+10     	; 0x25a8 <DIO_ReadPort+0x38>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	61 f0       	breq	.+24     	; 0x25be <DIO_ReadPort+0x4e>
    25a6:	1e c0       	rjmp	.+60     	; 0x25e4 <DIO_ReadPort+0x74>
    25a8:	2b 81       	ldd	r18, Y+3	; 0x03
    25aa:	3c 81       	ldd	r19, Y+4	; 0x04
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	81 f0       	breq	.+32     	; 0x25d2 <DIO_ReadPort+0x62>
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	83 30       	cpi	r24, 0x03	; 3
    25b8:	91 05       	cpc	r25, r1
    25ba:	81 f0       	breq	.+32     	; 0x25dc <DIO_ReadPort+0x6c>
    25bc:	13 c0       	rjmp	.+38     	; 0x25e4 <DIO_ReadPort+0x74>
	{
		case PA :
		data=PINA;
    25be:	e9 e3       	ldi	r30, 0x39	; 57
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	0e c0       	rjmp	.+28     	; 0x25e4 <DIO_ReadPort+0x74>
		break;
		case PB :
		data=PINB;
    25c8:	e6 e3       	ldi	r30, 0x36	; 54
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	09 c0       	rjmp	.+18     	; 0x25e4 <DIO_ReadPort+0x74>
		break;
		case PC :
		data=PINC;
    25d2:	e3 e3       	ldi	r30, 0x33	; 51
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <DIO_ReadPort+0x74>
		break;
		case PD :
		data=PIND;
    25dc:	e0 e3       	ldi	r30, 0x30	; 48
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <ICU_fun>:

static u16 t1,t2,time;
static u8 ov,flag;

static void ICU_fun()
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	if(flag==0)
    25fc:	80 91 c1 01 	lds	r24, 0x01C1
    2600:	88 23       	and	r24, r24
    2602:	79 f4       	brne	.+30     	; 0x2622 <ICU_fun+0x2e>
	{
		t1=ICR1;
    2604:	e6 e4       	ldi	r30, 0x46	; 70
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	90 93 bb 01 	sts	0x01BB, r25
    2610:	80 93 ba 01 	sts	0x01BA, r24
		Timer1_InputCaptureEdge(FALLING);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	0e 94 17 0a 	call	0x142e	; 0x142e <Timer1_InputCaptureEdge>
		flag=1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	80 93 c1 01 	sts	0x01C1, r24
    2620:	11 c0       	rjmp	.+34     	; 0x2644 <ICU_fun+0x50>
	}
	else if(flag==1)
    2622:	80 91 c1 01 	lds	r24, 0x01C1
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	69 f4       	brne	.+26     	; 0x2644 <ICU_fun+0x50>
	{
		t2=ICR1;
    262a:	e6 e4       	ldi	r30, 0x46	; 70
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	90 93 bd 01 	sts	0x01BD, r25
    2636:	80 93 bc 01 	sts	0x01BC, r24
		Timer1_ICU_InterruptDisable();
    263a:	0e 94 98 0a 	call	0x1530	; 0x1530 <Timer1_ICU_InterruptDisable>
		flag=2;
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	80 93 c1 01 	sts	0x01C1, r24
	}
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <ov_fun>:

static void ov_fun()
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
	ov++;
    2652:	80 91 c0 01 	lds	r24, 0x01C0
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	80 93 c0 01 	sts	0x01C0, r24
}
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <US_init>:

void US_init(void)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
	Timer1_init();
    266a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Timer1_init>
	Timer1_ICU_set_callbck(ICU_fun);
    266e:	8a ef       	ldi	r24, 0xFA	; 250
    2670:	92 e1       	ldi	r25, 0x12	; 18
    2672:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <Timer1_ICU_set_callbck>
	Timer1_OV_set_callbck(ov_fun);
    2676:	85 e2       	ldi	r24, 0x25	; 37
    2678:	93 e1       	ldi	r25, 0x13	; 19
    267a:	0e 94 a6 0a 	call	0x154c	; 0x154c <Timer1_OV_set_callbck>
	Timer1_OV_InterruptEnable();
    267e:	0e 94 36 0a 	call	0x146c	; 0x146c <Timer1_OV_InterruptEnable>
}
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <US_get_distance>:

void US_get_distance(US_t us,u8 *d)
{
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	c3 57       	subi	r28, 0x73	; 115
    2696:	d0 40       	sbci	r29, 0x00	; 0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	fe 01       	movw	r30, r28
    26a4:	e1 59       	subi	r30, 0x91	; 145
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 83       	st	Z, r24
    26aa:	fe 01       	movw	r30, r28
    26ac:	e0 59       	subi	r30, 0x90	; 144
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	71 83       	std	Z+1, r23	; 0x01
    26b2:	60 83       	st	Z, r22
	Timer1_start();
    26b4:	0e 94 8c 09 	call	0x1318	; 0x1318 <Timer1_start>
	Timer1_set_int_value(0);
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	0e 94 af 09 	call	0x135e	; 0x135e <Timer1_set_int_value>
	switch (us) {
    26c0:	fe 01       	movw	r30, r28
    26c2:	e1 59       	subi	r30, 0x91	; 145
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	e4 96       	adiw	r28, 0x34	; 52
    26ce:	3f af       	std	Y+63, r19	; 0x3f
    26d0:	2e af       	std	Y+62, r18	; 0x3e
    26d2:	e4 97       	sbiw	r28, 0x34	; 52
    26d4:	e4 96       	adiw	r28, 0x34	; 52
    26d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    26d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    26da:	e4 97       	sbiw	r28, 0x34	; 52
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	91 05       	cpc	r25, r1
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <US_get_distance+0x5c>
    26e2:	52 c1       	rjmp	.+676    	; 0x2988 <US_get_distance+0x300>
    26e4:	e4 96       	adiw	r28, 0x34	; 52
    26e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    26e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ea:	e4 97       	sbiw	r28, 0x34	; 52
    26ec:	e2 30       	cpi	r30, 0x02	; 2
    26ee:	f1 05       	cpc	r31, r1
    26f0:	44 f4       	brge	.+16     	; 0x2702 <US_get_distance+0x7a>
    26f2:	e4 96       	adiw	r28, 0x34	; 52
    26f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    26f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    26f8:	e4 97       	sbiw	r28, 0x34	; 52
    26fa:	21 15       	cp	r18, r1
    26fc:	31 05       	cpc	r19, r1
    26fe:	91 f0       	breq	.+36     	; 0x2724 <US_get_distance+0x9c>
    2700:	f9 c3       	rjmp	.+2034   	; 0x2ef4 <US_get_distance+0x86c>
    2702:	e4 96       	adiw	r28, 0x34	; 52
    2704:	8e ad       	ldd	r24, Y+62	; 0x3e
    2706:	9f ad       	ldd	r25, Y+63	; 0x3f
    2708:	e4 97       	sbiw	r28, 0x34	; 52
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	91 05       	cpc	r25, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <US_get_distance+0x8a>
    2710:	64 c2       	rjmp	.+1224   	; 0x2bda <US_get_distance+0x552>
    2712:	e4 96       	adiw	r28, 0x34	; 52
    2714:	ee ad       	ldd	r30, Y+62	; 0x3e
    2716:	ff ad       	ldd	r31, Y+63	; 0x3f
    2718:	e4 97       	sbiw	r28, 0x34	; 52
    271a:	e3 30       	cpi	r30, 0x03	; 3
    271c:	f1 05       	cpc	r31, r1
    271e:	09 f4       	brne	.+2      	; 0x2722 <US_get_distance+0x9a>
    2720:	23 c3       	rjmp	.+1606   	; 0x2d68 <US_get_distance+0x6e0>
    2722:	e8 c3       	rjmp	.+2000   	; 0x2ef4 <US_get_distance+0x86c>
		case US_1:
		{
			DIO_WritePin(US_1_PIN,HIGH);
    2724:	80 e1       	ldi	r24, 0x10	; 16
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    272c:	fe 01       	movw	r30, r28
    272e:	e5 59       	subi	r30, 0x95	; 149
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e2       	ldi	r26, 0x20	; 32
    2738:	b1 e4       	ldi	r27, 0x41	; 65
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2742:	8e 01       	movw	r16, r28
    2744:	09 59       	subi	r16, 0x99	; 153
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	e5 59       	subi	r30, 0x95	; 149
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	2b ea       	ldi	r18, 0xAB	; 171
    2758:	3a ea       	ldi	r19, 0xAA	; 170
    275a:	4a e2       	ldi	r20, 0x2A	; 42
    275c:	50 e4       	ldi	r21, 0x40	; 64
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	80 83       	st	Z, r24
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	a2 83       	std	Z+2, r26	; 0x02
    276e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2770:	fe 01       	movw	r30, r28
    2772:	e9 59       	subi	r30, 0x99	; 153
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	34 f4       	brge	.+12     	; 0x279a <US_get_distance+0x112>
		__ticks = 1;
    278e:	fe 01       	movw	r30, r28
    2790:	ea 59       	subi	r30, 0x9A	; 154
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	80 83       	st	Z, r24
    2798:	e0 c0       	rjmp	.+448    	; 0x295a <US_get_distance+0x2d2>
	else if (__tmp > 255)
    279a:	fe 01       	movw	r30, r28
    279c:	e9 59       	subi	r30, 0x99	; 153
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	53 e4       	ldi	r21, 0x43	; 67
    27b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <US_get_distance+0x132>
    27b8:	c0 c0       	rjmp	.+384    	; 0x293a <US_get_distance+0x2b2>
	{
		_delay_ms(__us / 1000.0);
    27ba:	fe 01       	movw	r30, r28
    27bc:	e5 59       	subi	r30, 0x95	; 149
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a e7       	ldi	r20, 0x7A	; 122
    27ce:	54 e4       	ldi	r21, 0x44	; 68
    27d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	fe 01       	movw	r30, r28
    27da:	ee 59       	subi	r30, 0x9E	; 158
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 83       	st	Z, r24
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	a2 83       	std	Z+2, r26	; 0x02
    27e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e6:	8e 01       	movw	r16, r28
    27e8:	02 5a       	subi	r16, 0xA2	; 162
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	fe 01       	movw	r30, r28
    27ee:	ee 59       	subi	r30, 0x9E	; 158
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a ef       	ldi	r20, 0xFA	; 250
    2800:	54 e4       	ldi	r21, 0x44	; 68
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	f8 01       	movw	r30, r16
    280c:	80 83       	st	Z, r24
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	a2 83       	std	Z+2, r26	; 0x02
    2812:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2814:	fe 01       	movw	r30, r28
    2816:	e2 5a       	subi	r30, 0xA2	; 162
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	82 81       	ldd	r24, Z+2	; 0x02
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    282e:	88 23       	and	r24, r24
    2830:	44 f4       	brge	.+16     	; 0x2842 <US_get_distance+0x1ba>
		__ticks = 1;
    2832:	fe 01       	movw	r30, r28
    2834:	e4 5a       	subi	r30, 0xA4	; 164
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	64 c0       	rjmp	.+200    	; 0x290a <US_get_distance+0x282>
	else if (__tmp > 65535)
    2842:	fe 01       	movw	r30, r28
    2844:	e2 5a       	subi	r30, 0xA2	; 162
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	3f ef       	ldi	r19, 0xFF	; 255
    2854:	4f e7       	ldi	r20, 0x7F	; 127
    2856:	57 e4       	ldi	r21, 0x47	; 71
    2858:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    285c:	18 16       	cp	r1, r24
    285e:	0c f0       	brlt	.+2      	; 0x2862 <US_get_distance+0x1da>
    2860:	43 c0       	rjmp	.+134    	; 0x28e8 <US_get_distance+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	fe 01       	movw	r30, r28
    2864:	ee 59       	subi	r30, 0x9E	; 158
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
    2876:	51 e4       	ldi	r21, 0x41	; 65
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8e 01       	movw	r16, r28
    2882:	04 5a       	subi	r16, 0xA4	; 164
    2884:	1f 4f       	sbci	r17, 0xFF	; 255
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	f8 01       	movw	r30, r16
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    2898:	1f c0       	rjmp	.+62     	; 0x28d8 <US_get_distance+0x250>
    289a:	fe 01       	movw	r30, r28
    289c:	e6 5a       	subi	r30, 0xA6	; 166
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	88 ec       	ldi	r24, 0xC8	; 200
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28a8:	fe 01       	movw	r30, r28
    28aa:	e6 5a       	subi	r30, 0xA6	; 166
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <US_get_distance+0x22a>
    28b6:	fe 01       	movw	r30, r28
    28b8:	e6 5a       	subi	r30, 0xA6	; 166
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c0:	de 01       	movw	r26, r28
    28c2:	a4 5a       	subi	r26, 0xA4	; 164
    28c4:	bf 4f       	sbci	r27, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	e4 5a       	subi	r30, 0xA4	; 164
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	11 96       	adiw	r26, 0x01	; 1
    28d4:	9c 93       	st	X, r25
    28d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d8:	fe 01       	movw	r30, r28
    28da:	e4 5a       	subi	r30, 0xA4	; 164
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	d1 f6       	brne	.-76     	; 0x289a <US_get_distance+0x212>
    28e6:	4b c0       	rjmp	.+150    	; 0x297e <US_get_distance+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	8e 01       	movw	r16, r28
    28ea:	04 5a       	subi	r16, 0xA4	; 164
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e2 5a       	subi	r30, 0xA2	; 162
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	f8 01       	movw	r30, r16
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	de 01       	movw	r26, r28
    290c:	a8 5a       	subi	r26, 0xA8	; 168
    290e:	bf 4f       	sbci	r27, 0xFF	; 255
    2910:	fe 01       	movw	r30, r28
    2912:	e4 5a       	subi	r30, 0xA4	; 164
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	9c 93       	st	X, r25
    291e:	8e 93       	st	-X, r24
    2920:	fe 01       	movw	r30, r28
    2922:	e8 5a       	subi	r30, 0xA8	; 168
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <US_get_distance+0x2a2>
    292e:	fe 01       	movw	r30, r28
    2930:	e8 5a       	subi	r30, 0xA8	; 168
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    2938:	22 c0       	rjmp	.+68     	; 0x297e <US_get_distance+0x2f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    293a:	8e 01       	movw	r16, r28
    293c:	0a 59       	subi	r16, 0x9A	; 154
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	fe 01       	movw	r30, r28
    2942:	e9 59       	subi	r30, 0x99	; 153
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	f8 01       	movw	r30, r16
    2958:	80 83       	st	Z, r24
    295a:	de 01       	movw	r26, r28
    295c:	a9 5a       	subi	r26, 0xA9	; 169
    295e:	bf 4f       	sbci	r27, 0xFF	; 255
    2960:	fe 01       	movw	r30, r28
    2962:	ea 59       	subi	r30, 0x9A	; 154
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    296a:	fe 01       	movw	r30, r28
    296c:	e9 5a       	subi	r30, 0xA9	; 169
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	8a 95       	dec	r24
    2974:	f1 f7       	brne	.-4      	; 0x2972 <US_get_distance+0x2ea>
    2976:	fe 01       	movw	r30, r28
    2978:	e9 5a       	subi	r30, 0xA9	; 169
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 83       	st	Z, r24
			_delay_us(10);
			DIO_WritePin(US_1_PIN,LOW);
    297e:	80 e1       	ldi	r24, 0x10	; 16
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    2986:	b6 c2       	rjmp	.+1388   	; 0x2ef4 <US_get_distance+0x86c>
		}
		break;

		case US_2:
		{
			DIO_WritePin(US_2_PIN,HIGH);
    2988:	81 e1       	ldi	r24, 0x11	; 17
    298a:	61 e0       	ldi	r22, 0x01	; 1
    298c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    2990:	fe 01       	movw	r30, r28
    2992:	ed 5a       	subi	r30, 0xAD	; 173
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e2       	ldi	r26, 0x20	; 32
    299c:	b1 e4       	ldi	r27, 0x41	; 65
    299e:	80 83       	st	Z, r24
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	a2 83       	std	Z+2, r26	; 0x02
    29a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29a6:	8e 01       	movw	r16, r28
    29a8:	01 5b       	subi	r16, 0xB1	; 177
    29aa:	1f 4f       	sbci	r17, 0xFF	; 255
    29ac:	fe 01       	movw	r30, r28
    29ae:	ed 5a       	subi	r30, 0xAD	; 173
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	2b ea       	ldi	r18, 0xAB	; 171
    29bc:	3a ea       	ldi	r19, 0xAA	; 170
    29be:	4a e2       	ldi	r20, 0x2A	; 42
    29c0:	50 e4       	ldi	r21, 0x40	; 64
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	f8 01       	movw	r30, r16
    29cc:	80 83       	st	Z, r24
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	a2 83       	std	Z+2, r26	; 0x02
    29d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29d4:	fe 01       	movw	r30, r28
    29d6:	e1 5b       	subi	r30, 0xB1	; 177
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	34 f4       	brge	.+12     	; 0x29fe <US_get_distance+0x376>
		__ticks = 1;
    29f2:	fe 01       	movw	r30, r28
    29f4:	e2 5b       	subi	r30, 0xB2	; 178
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 83       	st	Z, r24
    29fc:	e0 c0       	rjmp	.+448    	; 0x2bbe <US_get_distance+0x536>
	else if (__tmp > 255)
    29fe:	fe 01       	movw	r30, r28
    2a00:	e1 5b       	subi	r30, 0xB1	; 177
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	53 e4       	ldi	r21, 0x43	; 67
    2a14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	0c f0       	brlt	.+2      	; 0x2a1e <US_get_distance+0x396>
    2a1c:	c0 c0       	rjmp	.+384    	; 0x2b9e <US_get_distance+0x516>
	{
		_delay_ms(__us / 1000.0);
    2a1e:	fe 01       	movw	r30, r28
    2a20:	ed 5a       	subi	r30, 0xAD	; 173
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	60 81       	ld	r22, Z
    2a26:	71 81       	ldd	r23, Z+1	; 0x01
    2a28:	82 81       	ldd	r24, Z+2	; 0x02
    2a2a:	93 81       	ldd	r25, Z+3	; 0x03
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4a e7       	ldi	r20, 0x7A	; 122
    2a32:	54 e4       	ldi	r21, 0x44	; 68
    2a34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e6 5b       	subi	r30, 0xB6	; 182
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 83       	st	Z, r24
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	a2 83       	std	Z+2, r26	; 0x02
    2a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	0a 5b       	subi	r16, 0xBA	; 186
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	fe 01       	movw	r30, r28
    2a52:	e6 5b       	subi	r30, 0xB6	; 182
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a ef       	ldi	r20, 0xFA	; 250
    2a64:	54 e4       	ldi	r21, 0x44	; 68
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	f8 01       	movw	r30, r16
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ea 5b       	subi	r30, 0xBA	; 186
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	44 f4       	brge	.+16     	; 0x2aa6 <US_get_distance+0x41e>
		__ticks = 1;
    2a96:	fe 01       	movw	r30, r28
    2a98:	ec 5b       	subi	r30, 0xBC	; 188
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	64 c0       	rjmp	.+200    	; 0x2b6e <US_get_distance+0x4e6>
	else if (__tmp > 65535)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ea 5b       	subi	r30, 0xBA	; 186
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <US_get_distance+0x43e>
    2ac4:	43 c0       	rjmp	.+134    	; 0x2b4c <US_get_distance+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e6 5b       	subi	r30, 0xB6	; 182
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8e 01       	movw	r16, r28
    2ae6:	0c 5b       	subi	r16, 0xBC	; 188
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	f8 01       	movw	r30, r16
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
    2afc:	1f c0       	rjmp	.+62     	; 0x2b3c <US_get_distance+0x4b4>
    2afe:	fe 01       	movw	r30, r28
    2b00:	ee 5b       	subi	r30, 0xBE	; 190
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	88 ec       	ldi	r24, 0xC8	; 200
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ee 5b       	subi	r30, 0xBE	; 190
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <US_get_distance+0x48e>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ee 5b       	subi	r30, 0xBE	; 190
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b24:	de 01       	movw	r26, r28
    2b26:	ac 5b       	subi	r26, 0xBC	; 188
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ec 5b       	subi	r30, 0xBC	; 188
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	11 96       	adiw	r26, 0x01	; 1
    2b38:	9c 93       	st	X, r25
    2b3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ec 5b       	subi	r30, 0xBC	; 188
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	d1 f6       	brne	.-76     	; 0x2afe <US_get_distance+0x476>
    2b4a:	42 c0       	rjmp	.+132    	; 0x2bd0 <US_get_distance+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4c:	8e 01       	movw	r16, r28
    2b4e:	0c 5b       	subi	r16, 0xBC	; 188
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	ea 5b       	subi	r30, 0xBA	; 186
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	f8 01       	movw	r30, r16
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	de 01       	movw	r26, r28
    2b70:	a0 5c       	subi	r26, 0xC0	; 192
    2b72:	bf 4f       	sbci	r27, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	ec 5b       	subi	r30, 0xBC	; 188
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 81       	ld	r24, Z
    2b7c:	91 81       	ldd	r25, Z+1	; 0x01
    2b7e:	11 96       	adiw	r26, 0x01	; 1
    2b80:	9c 93       	st	X, r25
    2b82:	8e 93       	st	-X, r24
    2b84:	fe 01       	movw	r30, r28
    2b86:	e0 5c       	subi	r30, 0xC0	; 192
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <US_get_distance+0x506>
    2b92:	fe 01       	movw	r30, r28
    2b94:	e0 5c       	subi	r30, 0xC0	; 192
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	91 83       	std	Z+1, r25	; 0x01
    2b9a:	80 83       	st	Z, r24
    2b9c:	19 c0       	rjmp	.+50     	; 0x2bd0 <US_get_distance+0x548>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b9e:	8e 01       	movw	r16, r28
    2ba0:	02 5b       	subi	r16, 0xB2	; 178
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e1 5b       	subi	r30, 0xB1	; 177
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	f8 01       	movw	r30, r16
    2bbc:	80 83       	st	Z, r24
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e2 5b       	subi	r30, 0xB2	; 178
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bc8:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bca:	8a 95       	dec	r24
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <US_get_distance+0x542>
    2bce:	8f af       	std	Y+63, r24	; 0x3f
			_delay_us(10);
			DIO_WritePin(US_2_PIN,LOW);
    2bd0:	81 e1       	ldi	r24, 0x11	; 17
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    2bd8:	8d c1       	rjmp	.+794    	; 0x2ef4 <US_get_distance+0x86c>
		}
		break;

		case US_3:
		{
			DIO_WritePin(US_3_PIN,HIGH);
    2bda:	82 e1       	ldi	r24, 0x12	; 18
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	a0 e2       	ldi	r26, 0x20	; 32
    2be8:	b1 e4       	ldi	r27, 0x41	; 65
    2bea:	8b af       	std	Y+59, r24	; 0x3b
    2bec:	9c af       	std	Y+60, r25	; 0x3c
    2bee:	ad af       	std	Y+61, r26	; 0x3d
    2bf0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bf2:	6b ad       	ldd	r22, Y+59	; 0x3b
    2bf4:	7c ad       	ldd	r23, Y+60	; 0x3c
    2bf6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bf8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bfa:	2b ea       	ldi	r18, 0xAB	; 171
    2bfc:	3a ea       	ldi	r19, 0xAA	; 170
    2bfe:	4a e2       	ldi	r20, 0x2A	; 42
    2c00:	50 e4       	ldi	r21, 0x40	; 64
    2c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	8f ab       	std	Y+55, r24	; 0x37
    2c0c:	98 af       	std	Y+56, r25	; 0x38
    2c0e:	a9 af       	std	Y+57, r26	; 0x39
    2c10:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2c12:	6f a9       	ldd	r22, Y+55	; 0x37
    2c14:	78 ad       	ldd	r23, Y+56	; 0x38
    2c16:	89 ad       	ldd	r24, Y+57	; 0x39
    2c18:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e8       	ldi	r20, 0x80	; 128
    2c20:	5f e3       	ldi	r21, 0x3F	; 63
    2c22:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c26:	88 23       	and	r24, r24
    2c28:	1c f4       	brge	.+6      	; 0x2c30 <US_get_distance+0x5a8>
		__ticks = 1;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	8e ab       	std	Y+54, r24	; 0x36
    2c2e:	91 c0       	rjmp	.+290    	; 0x2d52 <US_get_distance+0x6ca>
	else if (__tmp > 255)
    2c30:	6f a9       	ldd	r22, Y+55	; 0x37
    2c32:	78 ad       	ldd	r23, Y+56	; 0x38
    2c34:	89 ad       	ldd	r24, Y+57	; 0x39
    2c36:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4f e7       	ldi	r20, 0x7F	; 127
    2c3e:	53 e4       	ldi	r21, 0x43	; 67
    2c40:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c44:	18 16       	cp	r1, r24
    2c46:	0c f0       	brlt	.+2      	; 0x2c4a <US_get_distance+0x5c2>
    2c48:	7b c0       	rjmp	.+246    	; 0x2d40 <US_get_distance+0x6b8>
	{
		_delay_ms(__us / 1000.0);
    2c4a:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c4c:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c50:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a e7       	ldi	r20, 0x7A	; 122
    2c58:	54 e4       	ldi	r21, 0x44	; 68
    2c5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8a ab       	std	Y+50, r24	; 0x32
    2c64:	9b ab       	std	Y+51, r25	; 0x33
    2c66:	ac ab       	std	Y+52, r26	; 0x34
    2c68:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6a:	6a a9       	ldd	r22, Y+50	; 0x32
    2c6c:	7b a9       	ldd	r23, Y+51	; 0x33
    2c6e:	8c a9       	ldd	r24, Y+52	; 0x34
    2c70:	9d a9       	ldd	r25, Y+53	; 0x35
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4a ef       	ldi	r20, 0xFA	; 250
    2c78:	54 e4       	ldi	r21, 0x44	; 68
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	8e a7       	std	Y+46, r24	; 0x2e
    2c84:	9f a7       	std	Y+47, r25	; 0x2f
    2c86:	a8 ab       	std	Y+48, r26	; 0x30
    2c88:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c8a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c8c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c8e:	88 a9       	ldd	r24, Y+48	; 0x30
    2c90:	99 a9       	ldd	r25, Y+49	; 0x31
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e8       	ldi	r20, 0x80	; 128
    2c98:	5f e3       	ldi	r21, 0x3F	; 63
    2c9a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c9e:	88 23       	and	r24, r24
    2ca0:	2c f4       	brge	.+10     	; 0x2cac <US_get_distance+0x624>
		__ticks = 1;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9d a7       	std	Y+45, r25	; 0x2d
    2ca8:	8c a7       	std	Y+44, r24	; 0x2c
    2caa:	3f c0       	rjmp	.+126    	; 0x2d2a <US_get_distance+0x6a2>
	else if (__tmp > 65535)
    2cac:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cae:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cb0:	88 a9       	ldd	r24, Y+48	; 0x30
    2cb2:	99 a9       	ldd	r25, Y+49	; 0x31
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	4c f5       	brge	.+82     	; 0x2d16 <US_get_distance+0x68e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc4:	6a a9       	ldd	r22, Y+50	; 0x32
    2cc6:	7b a9       	ldd	r23, Y+51	; 0x33
    2cc8:	8c a9       	ldd	r24, Y+52	; 0x34
    2cca:	9d a9       	ldd	r25, Y+53	; 0x35
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9d a7       	std	Y+45, r25	; 0x2d
    2cea:	8c a7       	std	Y+44, r24	; 0x2c
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <US_get_distance+0x684>
    2cee:	88 ec       	ldi	r24, 0xC8	; 200
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9b a7       	std	Y+43, r25	; 0x2b
    2cf4:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cf6:	8a a5       	ldd	r24, Y+42	; 0x2a
    2cf8:	9b a5       	ldd	r25, Y+43	; 0x2b
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <US_get_distance+0x672>
    2cfe:	9b a7       	std	Y+43, r25	; 0x2b
    2d00:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d04:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	9d a7       	std	Y+45, r25	; 0x2d
    2d0a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d0e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	69 f7       	brne	.-38     	; 0x2cee <US_get_distance+0x666>
    2d14:	24 c0       	rjmp	.+72     	; 0x2d5e <US_get_distance+0x6d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d16:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d18:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d1a:	88 a9       	ldd	r24, Y+48	; 0x30
    2d1c:	99 a9       	ldd	r25, Y+49	; 0x31
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9d a7       	std	Y+45, r25	; 0x2d
    2d28:	8c a7       	std	Y+44, r24	; 0x2c
    2d2a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d2c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d2e:	99 a7       	std	Y+41, r25	; 0x29
    2d30:	88 a7       	std	Y+40, r24	; 0x28
    2d32:	88 a5       	ldd	r24, Y+40	; 0x28
    2d34:	99 a5       	ldd	r25, Y+41	; 0x29
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <US_get_distance+0x6ae>
    2d3a:	99 a7       	std	Y+41, r25	; 0x29
    2d3c:	88 a7       	std	Y+40, r24	; 0x28
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <US_get_distance+0x6d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d40:	6f a9       	ldd	r22, Y+55	; 0x37
    2d42:	78 ad       	ldd	r23, Y+56	; 0x38
    2d44:	89 ad       	ldd	r24, Y+57	; 0x39
    2d46:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8e ab       	std	Y+54, r24	; 0x36
    2d52:	8e a9       	ldd	r24, Y+54	; 0x36
    2d54:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d56:	8f a1       	ldd	r24, Y+39	; 0x27
    2d58:	8a 95       	dec	r24
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <US_get_distance+0x6d0>
    2d5c:	8f a3       	std	Y+39, r24	; 0x27
			_delay_us(10);
			DIO_WritePin(US_3_PIN,LOW);
    2d5e:	82 e1       	ldi	r24, 0x12	; 18
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    2d66:	c6 c0       	rjmp	.+396    	; 0x2ef4 <US_get_distance+0x86c>
		}
		break;

		case US_4:
		{
			DIO_WritePin(US_4_PIN,HIGH);
    2d68:	83 e1       	ldi	r24, 0x13	; 19
    2d6a:	61 e0       	ldi	r22, 0x01	; 1
    2d6c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	a0 e2       	ldi	r26, 0x20	; 32
    2d76:	b1 e4       	ldi	r27, 0x41	; 65
    2d78:	8b a3       	std	Y+35, r24	; 0x23
    2d7a:	9c a3       	std	Y+36, r25	; 0x24
    2d7c:	ad a3       	std	Y+37, r26	; 0x25
    2d7e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d80:	6b a1       	ldd	r22, Y+35	; 0x23
    2d82:	7c a1       	ldd	r23, Y+36	; 0x24
    2d84:	8d a1       	ldd	r24, Y+37	; 0x25
    2d86:	9e a1       	ldd	r25, Y+38	; 0x26
    2d88:	2b ea       	ldi	r18, 0xAB	; 171
    2d8a:	3a ea       	ldi	r19, 0xAA	; 170
    2d8c:	4a e2       	ldi	r20, 0x2A	; 42
    2d8e:	50 e4       	ldi	r21, 0x40	; 64
    2d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	8f 8f       	std	Y+31, r24	; 0x1f
    2d9a:	98 a3       	std	Y+32, r25	; 0x20
    2d9c:	a9 a3       	std	Y+33, r26	; 0x21
    2d9e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2da0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2da2:	78 a1       	ldd	r23, Y+32	; 0x20
    2da4:	89 a1       	ldd	r24, Y+33	; 0x21
    2da6:	9a a1       	ldd	r25, Y+34	; 0x22
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e8       	ldi	r20, 0x80	; 128
    2dae:	5f e3       	ldi	r21, 0x3F	; 63
    2db0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2db4:	88 23       	and	r24, r24
    2db6:	1c f4       	brge	.+6      	; 0x2dbe <US_get_distance+0x736>
		__ticks = 1;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	8e 8f       	std	Y+30, r24	; 0x1e
    2dbc:	91 c0       	rjmp	.+290    	; 0x2ee0 <US_get_distance+0x858>
	else if (__tmp > 255)
    2dbe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dc0:	78 a1       	ldd	r23, Y+32	; 0x20
    2dc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	53 e4       	ldi	r21, 0x43	; 67
    2dce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	0c f0       	brlt	.+2      	; 0x2dd8 <US_get_distance+0x750>
    2dd6:	7b c0       	rjmp	.+246    	; 0x2ece <US_get_distance+0x846>
	{
		_delay_ms(__us / 1000.0);
    2dd8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dda:	7c a1       	ldd	r23, Y+36	; 0x24
    2ddc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dde:	9e a1       	ldd	r25, Y+38	; 0x26
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a e7       	ldi	r20, 0x7A	; 122
    2de6:	54 e4       	ldi	r21, 0x44	; 68
    2de8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8a 8f       	std	Y+26, r24	; 0x1a
    2df2:	9b 8f       	std	Y+27, r25	; 0x1b
    2df4:	ac 8f       	std	Y+28, r26	; 0x1c
    2df6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2dfa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2dfc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dfe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a ef       	ldi	r20, 0xFA	; 250
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	8e 8b       	std	Y+22, r24	; 0x16
    2e12:	9f 8b       	std	Y+23, r25	; 0x17
    2e14:	a8 8f       	std	Y+24, r26	; 0x18
    2e16:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2e18:	6e 89       	ldd	r22, Y+22	; 0x16
    2e1a:	7f 89       	ldd	r23, Y+23	; 0x17
    2e1c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e1e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	2c f4       	brge	.+10     	; 0x2e3a <US_get_distance+0x7b2>
		__ticks = 1;
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9d 8b       	std	Y+21, r25	; 0x15
    2e36:	8c 8b       	std	Y+20, r24	; 0x14
    2e38:	3f c0       	rjmp	.+126    	; 0x2eb8 <US_get_distance+0x830>
	else if (__tmp > 65535)
    2e3a:	6e 89       	ldd	r22, Y+22	; 0x16
    2e3c:	7f 89       	ldd	r23, Y+23	; 0x17
    2e3e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e40:	99 8d       	ldd	r25, Y+25	; 0x19
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	3f ef       	ldi	r19, 0xFF	; 255
    2e46:	4f e7       	ldi	r20, 0x7F	; 127
    2e48:	57 e4       	ldi	r21, 0x47	; 71
    2e4a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e4e:	18 16       	cp	r1, r24
    2e50:	4c f5       	brge	.+82     	; 0x2ea4 <US_get_distance+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e52:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e54:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e58:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e2       	ldi	r20, 0x20	; 32
    2e60:	51 e4       	ldi	r21, 0x41	; 65
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9d 8b       	std	Y+21, r25	; 0x15
    2e78:	8c 8b       	std	Y+20, r24	; 0x14
    2e7a:	0f c0       	rjmp	.+30     	; 0x2e9a <US_get_distance+0x812>
    2e7c:	88 ec       	ldi	r24, 0xC8	; 200
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9b 8b       	std	Y+19, r25	; 0x13
    2e82:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e84:	8a 89       	ldd	r24, Y+18	; 0x12
    2e86:	9b 89       	ldd	r25, Y+19	; 0x13
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <US_get_distance+0x800>
    2e8c:	9b 8b       	std	Y+19, r25	; 0x13
    2e8e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e90:	8c 89       	ldd	r24, Y+20	; 0x14
    2e92:	9d 89       	ldd	r25, Y+21	; 0x15
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	9d 8b       	std	Y+21, r25	; 0x15
    2e98:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e9c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	69 f7       	brne	.-38     	; 0x2e7c <US_get_distance+0x7f4>
    2ea2:	24 c0       	rjmp	.+72     	; 0x2eec <US_get_distance+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea4:	6e 89       	ldd	r22, Y+22	; 0x16
    2ea6:	7f 89       	ldd	r23, Y+23	; 0x17
    2ea8:	88 8d       	ldd	r24, Y+24	; 0x18
    2eaa:	99 8d       	ldd	r25, Y+25	; 0x19
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	9d 8b       	std	Y+21, r25	; 0x15
    2eb6:	8c 8b       	std	Y+20, r24	; 0x14
    2eb8:	8c 89       	ldd	r24, Y+20	; 0x14
    2eba:	9d 89       	ldd	r25, Y+21	; 0x15
    2ebc:	99 8b       	std	Y+17, r25	; 0x11
    2ebe:	88 8b       	std	Y+16, r24	; 0x10
    2ec0:	88 89       	ldd	r24, Y+16	; 0x10
    2ec2:	99 89       	ldd	r25, Y+17	; 0x11
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <US_get_distance+0x83c>
    2ec8:	99 8b       	std	Y+17, r25	; 0x11
    2eca:	88 8b       	std	Y+16, r24	; 0x10
    2ecc:	0f c0       	rjmp	.+30     	; 0x2eec <US_get_distance+0x864>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ece:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ed0:	78 a1       	ldd	r23, Y+32	; 0x20
    2ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8e 8f       	std	Y+30, r24	; 0x1e
    2ee0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ee2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee6:	8a 95       	dec	r24
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <US_get_distance+0x85e>
    2eea:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_us(10);
			DIO_WritePin(US_4_PIN,LOW);
    2eec:	83 e1       	ldi	r24, 0x13	; 19
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
		break;

		default:
			break;
	}
	flag=0;
    2ef4:	10 92 c1 01 	sts	0x01C1, r1
	Timer1_ICU_InterruptEnable();
    2ef8:	0e 94 8a 0a 	call	0x1514	; 0x1514 <Timer1_ICU_InterruptEnable>
	Timer1_InputCaptureEdge(RISING);
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	0e 94 17 0a 	call	0x142e	; 0x142e <Timer1_InputCaptureEdge>
	while(flag<2);
    2f02:	80 91 c1 01 	lds	r24, 0x01C1
    2f06:	82 30       	cpi	r24, 0x02	; 2
    2f08:	e0 f3       	brcs	.-8      	; 0x2f02 <US_get_distance+0x87a>
	time=(t2-t1)+(65536*ov);
    2f0a:	20 91 bc 01 	lds	r18, 0x01BC
    2f0e:	30 91 bd 01 	lds	r19, 0x01BD
    2f12:	80 91 ba 01 	lds	r24, 0x01BA
    2f16:	90 91 bb 01 	lds	r25, 0x01BB
    2f1a:	28 1b       	sub	r18, r24
    2f1c:	39 0b       	sbc	r19, r25
    2f1e:	80 91 c0 01 	lds	r24, 0x01C0
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	a0 e0       	ldi	r26, 0x00	; 0
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	99 27       	eor	r25, r25
    2f2e:	88 27       	eor	r24, r24
    2f30:	82 0f       	add	r24, r18
    2f32:	93 1f       	adc	r25, r19
    2f34:	90 93 bf 01 	sts	0x01BF, r25
    2f38:	80 93 be 01 	sts	0x01BE, r24
	*d=time/58;
    2f3c:	80 91 be 01 	lds	r24, 0x01BE
    2f40:	90 91 bf 01 	lds	r25, 0x01BF
    2f44:	2a e3       	ldi	r18, 0x3A	; 58
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	b9 01       	movw	r22, r18
    2f4a:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    2f4e:	cb 01       	movw	r24, r22
    2f50:	fe 01       	movw	r30, r28
    2f52:	e0 59       	subi	r30, 0x90	; 144
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	01 90       	ld	r0, Z+
    2f58:	f0 81       	ld	r31, Z
    2f5a:	e0 2d       	mov	r30, r0
    2f5c:	80 83       	st	Z, r24
	Timer1_stop();
    2f5e:	0e 94 a1 09 	call	0x1342	; 0x1342 <Timer1_stop>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	a8 ec       	ldi	r26, 0xC8	; 200
    2f68:	b1 e4       	ldi	r27, 0x41	; 65
    2f6a:	8b 87       	std	Y+11, r24	; 0x0b
    2f6c:	9c 87       	std	Y+12, r25	; 0x0c
    2f6e:	ad 87       	std	Y+13, r26	; 0x0d
    2f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a ef       	ldi	r20, 0xFA	; 250
    2f80:	54 e4       	ldi	r21, 0x44	; 68
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8f 83       	std	Y+7, r24	; 0x07
    2f8c:	98 87       	std	Y+8, r25	; 0x08
    2f8e:	a9 87       	std	Y+9, r26	; 0x09
    2f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f92:	6f 81       	ldd	r22, Y+7	; 0x07
    2f94:	78 85       	ldd	r23, Y+8	; 0x08
    2f96:	89 85       	ldd	r24, Y+9	; 0x09
    2f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	5f e3       	ldi	r21, 0x3F	; 63
    2fa2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fa6:	88 23       	and	r24, r24
    2fa8:	2c f4       	brge	.+10     	; 0x2fb4 <US_get_distance+0x92c>
		__ticks = 1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	3f c0       	rjmp	.+126    	; 0x3032 <US_get_distance+0x9aa>
	else if (__tmp > 65535)
    2fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb6:	78 85       	ldd	r23, Y+8	; 0x08
    2fb8:	89 85       	ldd	r24, Y+9	; 0x09
    2fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	4c f5       	brge	.+82     	; 0x301e <US_get_distance+0x996>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e2       	ldi	r20, 0x20	; 32
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <US_get_distance+0x98c>
    2ff6:	88 ec       	ldi	r24, 0xC8	; 200
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9c 83       	std	Y+4, r25	; 0x04
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <US_get_distance+0x97a>
    3006:	9c 83       	std	Y+4, r25	; 0x04
    3008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	8d 81       	ldd	r24, Y+5	; 0x05
    300c:	9e 81       	ldd	r25, Y+6	; 0x06
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9e 83       	std	Y+6, r25	; 0x06
    3012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	69 f7       	brne	.-38     	; 0x2ff6 <US_get_distance+0x96e>
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <US_get_distance+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301e:	6f 81       	ldd	r22, Y+7	; 0x07
    3020:	78 85       	ldd	r23, Y+8	; 0x08
    3022:	89 85       	ldd	r24, Y+9	; 0x09
    3024:	9a 85       	ldd	r25, Y+10	; 0x0a
    3026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	9e 83       	std	Y+6, r25	; 0x06
    3030:	8d 83       	std	Y+5, r24	; 0x05
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	9a 81       	ldd	r25, Y+2	; 0x02
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <US_get_distance+0x9b6>
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(25);
}
    3046:	cd 58       	subi	r28, 0x8D	; 141
    3048:	df 4f       	sbci	r29, 0xFF	; 255
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	08 95       	ret

0000305e <CarCon_Vinit>:
#include "Tires_Control/Tires_Control_Cfg.h"

move_state_t state=FW;

void CarCon_Vinit(void)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    DIO_WritePin(MOTOR_FORWARD_PIN,LOW);
    3066:	84 e1       	ldi	r24, 0x14	; 20
    3068:	60 e0       	ldi	r22, 0x00	; 0
    306a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_BACKWARD_PIN,LOW);
    306e:	85 e1       	ldi	r24, 0x15	; 21
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_RIGHT_PIN,LOW);
    3076:	87 e1       	ldi	r24, 0x17	; 23
    3078:	60 e0       	ldi	r22, 0x00	; 0
    307a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_LEFT_PIN,LOW);
    307e:	86 e1       	ldi	r24, 0x16	; 22
    3080:	60 e0       	ldi	r22, 0x00	; 0
    3082:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    Timer2_init();
    3086:	0e 94 1e 08 	call	0x103c	; 0x103c <Timer2_init>
}
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <CarCon_VMoveForward>:

void CarCon_VMoveForward(u8 duty)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	0f 92       	push	r0
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	89 83       	std	Y+1, r24	; 0x01
    Timer2_PWM_set_cmp(duty);
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <Timer2_PWM_set_cmp>
	Timer2_start();
    30a2:	0e 94 3a 08 	call	0x1074	; 0x1074 <Timer2_start>
    DIO_WritePin(MOTOR_FORWARD_PIN , HIGH);
    30a6:	84 e1       	ldi	r24, 0x14	; 20
    30a8:	61 e0       	ldi	r22, 0x01	; 1
    30aa:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_BACKWARD_PIN , LOW);
    30ae:	85 e1       	ldi	r24, 0x15	; 21
    30b0:	60 e0       	ldi	r22, 0x00	; 0
    30b2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    state=FW;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	80 93 68 01 	sts	0x0168, r24
}
    30bc:	0f 90       	pop	r0
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	08 95       	ret

000030c4 <CarCon_VMoveBackward>:

void CarCon_VMoveBackward(u8 duty)
{
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	0f 92       	push	r0
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	89 83       	std	Y+1, r24	; 0x01
    Timer2_PWM_set_cmp(duty);
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <Timer2_PWM_set_cmp>
	Timer2_start();
    30d6:	0e 94 3a 08 	call	0x1074	; 0x1074 <Timer2_start>
    DIO_WritePin(MOTOR_FORWARD_PIN , LOW);
    30da:	84 e1       	ldi	r24, 0x14	; 20
    30dc:	60 e0       	ldi	r22, 0x00	; 0
    30de:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_BACKWARD_PIN , HIGH);
    30e2:	85 e1       	ldi	r24, 0x15	; 21
    30e4:	61 e0       	ldi	r22, 0x01	; 1
    30e6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    state=BW;
    30ea:	10 92 68 01 	sts	0x0168, r1
}
    30ee:	0f 90       	pop	r0
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <CarCon_VTurnRight>:

void CarCon_VTurnRight(void)
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(MOTOR_RIGHT_PIN,LOW);
    30fe:	87 e1       	ldi	r24, 0x17	; 23
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_LEFT_PIN,HIGH);
    3106:	86 e1       	ldi	r24, 0x16	; 22
    3108:	61 e0       	ldi	r22, 0x01	; 1
    310a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_RIGHT_PIN,HIGH);
    310e:	87 e1       	ldi	r24, 0x17	; 23
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_LEFT_PIN,LOW);
    3116:	86 e1       	ldi	r24, 0x16	; 22
    3118:	60 e0       	ldi	r22, 0x00	; 0
    311a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
}
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <CarCon_VTurnRight_withAngle>:

void CarCon_VTurnRight_withAngle(u8 angle)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	60 97       	sbiw	r28, 0x10	; 16
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	88 8b       	std	Y+16, r24	; 0x10
    if (angle > 0) {
    313a:	88 89       	ldd	r24, Y+16	; 0x10
    313c:	88 23       	and	r24, r24
    313e:	09 f4       	brne	.+2      	; 0x3142 <CarCon_VTurnRight_withAngle+0x1e>
    3140:	93 c0       	rjmp	.+294    	; 0x3268 <CarCon_VTurnRight_withAngle+0x144>
        DIO_WritePin(MOTOR_LEFT_PIN,LOW);
    3142:	86 e1       	ldi	r24, 0x16	; 22
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
        u8 delay_Time = angle * Time_Angle;
    314a:	88 89       	ldd	r24, Y+16	; 0x10
    314c:	88 2f       	mov	r24, r24
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	9c 01       	movw	r18, r24
    3152:	22 0f       	add	r18, r18
    3154:	33 1f       	adc	r19, r19
    3156:	c9 01       	movw	r24, r18
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	82 0f       	add	r24, r18
    3162:	93 1f       	adc	r25, r19
    3164:	8f 87       	std	Y+15, r24	; 0x0f
        DIO_WritePin(MOTOR_RIGHT_PIN,HIGH);
    3166:	87 e1       	ldi	r24, 0x17	; 23
    3168:	61 e0       	ldi	r22, 0x01	; 1
    316a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
        _delay_ms(delay_Time);
    316e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3170:	88 2f       	mov	r24, r24
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	a0 e0       	ldi	r26, 0x00	; 0
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	8b 87       	std	Y+11, r24	; 0x0b
    3186:	9c 87       	std	Y+12, r25	; 0x0c
    3188:	ad 87       	std	Y+13, r26	; 0x0d
    318a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318c:	6b 85       	ldd	r22, Y+11	; 0x0b
    318e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3190:	8d 85       	ldd	r24, Y+13	; 0x0d
    3192:	9e 85       	ldd	r25, Y+14	; 0x0e
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a ef       	ldi	r20, 0xFA	; 250
    319a:	54 e4       	ldi	r21, 0x44	; 68
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8f 83       	std	Y+7, r24	; 0x07
    31a6:	98 87       	std	Y+8, r25	; 0x08
    31a8:	a9 87       	std	Y+9, r26	; 0x09
    31aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ac:	6f 81       	ldd	r22, Y+7	; 0x07
    31ae:	78 85       	ldd	r23, Y+8	; 0x08
    31b0:	89 85       	ldd	r24, Y+9	; 0x09
    31b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31c0:	88 23       	and	r24, r24
    31c2:	2c f4       	brge	.+10     	; 0x31ce <CarCon_VTurnRight_withAngle+0xaa>
		__ticks = 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	3f c0       	rjmp	.+126    	; 0x324c <CarCon_VTurnRight_withAngle+0x128>
	else if (__tmp > 65535)
    31ce:	6f 81       	ldd	r22, Y+7	; 0x07
    31d0:	78 85       	ldd	r23, Y+8	; 0x08
    31d2:	89 85       	ldd	r24, Y+9	; 0x09
    31d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    31e2:	18 16       	cp	r1, r24
    31e4:	4c f5       	brge	.+82     	; 0x3238 <CarCon_VTurnRight_withAngle+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	0f c0       	rjmp	.+30     	; 0x322e <CarCon_VTurnRight_withAngle+0x10a>
    3210:	88 ec       	ldi	r24, 0xC8	; 200
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9c 83       	std	Y+4, r25	; 0x04
    3216:	8b 83       	std	Y+3, r24	; 0x03
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	9c 81       	ldd	r25, Y+4	; 0x04
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <CarCon_VTurnRight_withAngle+0xf8>
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	8d 81       	ldd	r24, Y+5	; 0x05
    3226:	9e 81       	ldd	r25, Y+6	; 0x06
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	69 f7       	brne	.-38     	; 0x3210 <CarCon_VTurnRight_withAngle+0xec>
    3236:	14 c0       	rjmp	.+40     	; 0x3260 <CarCon_VTurnRight_withAngle+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	8d 81       	ldd	r24, Y+5	; 0x05
    324e:	9e 81       	ldd	r25, Y+6	; 0x06
    3250:	9a 83       	std	Y+2, r25	; 0x02
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <CarCon_VTurnRight_withAngle+0x134>
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01
        DIO_WritePin(MOTOR_RIGHT_PIN,LOW);
    3260:	87 e1       	ldi	r24, 0x17	; 23
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    }
    else{

    }
}
    3268:	60 96       	adiw	r28, 0x10	; 16
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <CarCon_VTurnLeft>:

void CarCon_VTurnLeft(void)
{
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(MOTOR_RIGHT_PIN,HIGH);
    3282:	87 e1       	ldi	r24, 0x17	; 23
    3284:	61 e0       	ldi	r22, 0x01	; 1
    3286:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_LEFT_PIN,LOW);
    328a:	86 e1       	ldi	r24, 0x16	; 22
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_RIGHT_PIN,LOW);
    3292:	87 e1       	ldi	r24, 0x17	; 23
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_LEFT_PIN,HIGH);
    329a:	86 e1       	ldi	r24, 0x16	; 22
    329c:	61 e0       	ldi	r22, 0x01	; 1
    329e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
}
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <CarCon_VTurnLeft_withAngle>:

void CarCon_VTurnLeft_withAngle(u8 angle)
{
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <CarCon_VTurnLeft_withAngle+0x6>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	8a 83       	std	Y+2, r24	; 0x02
    if (angle > 0) {
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	88 23       	and	r24, r24
    32b8:	b1 f0       	breq	.+44     	; 0x32e6 <CarCon_VTurnLeft_withAngle+0x3e>
        DIO_WritePin(MOTOR_RIGHT_PIN,LOW);
    32ba:	87 e1       	ldi	r24, 0x17	; 23
    32bc:	60 e0       	ldi	r22, 0x00	; 0
    32be:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
        u8 delay_Time = angle * Time_Angle;
    32c2:	8a 81       	ldd	r24, Y+2	; 0x02
    32c4:	88 2f       	mov	r24, r24
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9c 01       	movw	r18, r24
    32ca:	22 0f       	add	r18, r18
    32cc:	33 1f       	adc	r19, r19
    32ce:	c9 01       	movw	r24, r18
    32d0:	88 0f       	add	r24, r24
    32d2:	99 1f       	adc	r25, r25
    32d4:	88 0f       	add	r24, r24
    32d6:	99 1f       	adc	r25, r25
    32d8:	82 0f       	add	r24, r18
    32da:	93 1f       	adc	r25, r19
    32dc:	89 83       	std	Y+1, r24	; 0x01
        DIO_WritePin(MOTOR_LEFT_PIN,HIGH);
    32de:	86 e1       	ldi	r24, 0x16	; 22
    32e0:	61 e0       	ldi	r22, 0x01	; 1
    32e2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
       //DIO_WritePin(MOTOR_LEFT_PIN,LOW);
    }
    else{

    }
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <CarCon_VStop_Move>:

void CarCon_VStop_Move(void)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    DIO_WritePin(MOTOR_FORWARD_PIN,LOW);
    32f8:	84 e1       	ldi	r24, 0x14	; 20
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_BACKWARD_PIN,LOW);
    3300:	85 e1       	ldi	r24, 0x15	; 21
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    Timer2_stop();
    3308:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer2_stop>
}
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <CarCon_VStop_Move_duty>:

void CarCon_VStop_Move_duty(void)
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	2e 97       	sbiw	r28, 0x0e	; 14
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
	if(state==FW)
    3326:	80 91 68 01 	lds	r24, 0x0168
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	21 f4       	brne	.+8      	; 0x3336 <CarCon_VStop_Move_duty+0x24>
	{
		CarCon_VMoveBackward(75);
    332e:	8b e4       	ldi	r24, 0x4B	; 75
    3330:	0e 94 62 18 	call	0x30c4	; 0x30c4 <CarCon_VMoveBackward>
    3334:	07 c0       	rjmp	.+14     	; 0x3344 <CarCon_VStop_Move_duty+0x32>
	}
	else if(state==BW)
    3336:	80 91 68 01 	lds	r24, 0x0168
    333a:	88 23       	and	r24, r24
    333c:	19 f4       	brne	.+6      	; 0x3344 <CarCon_VStop_Move_duty+0x32>
	{
		CarCon_VMoveForward(50);
    333e:	82 e3       	ldi	r24, 0x32	; 50
    3340:	0e 94 48 18 	call	0x3090	; 0x3090 <CarCon_VMoveForward>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	aa ef       	ldi	r26, 0xFA	; 250
    334a:	b3 e4       	ldi	r27, 0x43	; 67
    334c:	8b 87       	std	Y+11, r24	; 0x0b
    334e:	9c 87       	std	Y+12, r25	; 0x0c
    3350:	ad 87       	std	Y+13, r26	; 0x0d
    3352:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3354:	6b 85       	ldd	r22, Y+11	; 0x0b
    3356:	7c 85       	ldd	r23, Y+12	; 0x0c
    3358:	8d 85       	ldd	r24, Y+13	; 0x0d
    335a:	9e 85       	ldd	r25, Y+14	; 0x0e
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a ef       	ldi	r20, 0xFA	; 250
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	8f 83       	std	Y+7, r24	; 0x07
    336e:	98 87       	std	Y+8, r25	; 0x08
    3370:	a9 87       	std	Y+9, r26	; 0x09
    3372:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3374:	6f 81       	ldd	r22, Y+7	; 0x07
    3376:	78 85       	ldd	r23, Y+8	; 0x08
    3378:	89 85       	ldd	r24, Y+9	; 0x09
    337a:	9a 85       	ldd	r25, Y+10	; 0x0a
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e8       	ldi	r20, 0x80	; 128
    3382:	5f e3       	ldi	r21, 0x3F	; 63
    3384:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3388:	88 23       	and	r24, r24
    338a:	2c f4       	brge	.+10     	; 0x3396 <CarCon_VStop_Move_duty+0x84>
		__ticks = 1;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	9e 83       	std	Y+6, r25	; 0x06
    3392:	8d 83       	std	Y+5, r24	; 0x05
    3394:	3f c0       	rjmp	.+126    	; 0x3414 <CarCon_VStop_Move_duty+0x102>
	else if (__tmp > 65535)
    3396:	6f 81       	ldd	r22, Y+7	; 0x07
    3398:	78 85       	ldd	r23, Y+8	; 0x08
    339a:	89 85       	ldd	r24, Y+9	; 0x09
    339c:	9a 85       	ldd	r25, Y+10	; 0x0a
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	3f ef       	ldi	r19, 0xFF	; 255
    33a2:	4f e7       	ldi	r20, 0x7F	; 127
    33a4:	57 e4       	ldi	r21, 0x47	; 71
    33a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33aa:	18 16       	cp	r1, r24
    33ac:	4c f5       	brge	.+82     	; 0x3400 <CarCon_VStop_Move_duty+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e2       	ldi	r20, 0x20	; 32
    33bc:	51 e4       	ldi	r21, 0x41	; 65
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	0f c0       	rjmp	.+30     	; 0x33f6 <CarCon_VStop_Move_duty+0xe4>
    33d8:	88 ec       	ldi	r24, 0xC8	; 200
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	9c 83       	std	Y+4, r25	; 0x04
    33de:	8b 83       	std	Y+3, r24	; 0x03
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	9c 81       	ldd	r25, Y+4	; 0x04
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <CarCon_VStop_Move_duty+0xd2>
    33e8:	9c 83       	std	Y+4, r25	; 0x04
    33ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ec:	8d 81       	ldd	r24, Y+5	; 0x05
    33ee:	9e 81       	ldd	r25, Y+6	; 0x06
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f6:	8d 81       	ldd	r24, Y+5	; 0x05
    33f8:	9e 81       	ldd	r25, Y+6	; 0x06
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	69 f7       	brne	.-38     	; 0x33d8 <CarCon_VStop_Move_duty+0xc6>
    33fe:	14 c0       	rjmp	.+40     	; 0x3428 <CarCon_VStop_Move_duty+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3400:	6f 81       	ldd	r22, Y+7	; 0x07
    3402:	78 85       	ldd	r23, Y+8	; 0x08
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	9a 85       	ldd	r25, Y+10	; 0x0a
    3408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	8d 83       	std	Y+5, r24	; 0x05
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	9a 83       	std	Y+2, r25	; 0x02
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	9a 81       	ldd	r25, Y+2	; 0x02
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <CarCon_VStop_Move_duty+0x10e>
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500);
    DIO_WritePin(MOTOR_FORWARD_PIN,LOW);
    3428:	84 e1       	ldi	r24, 0x14	; 20
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_BACKWARD_PIN,LOW);
    3430:	85 e1       	ldi	r24, 0x15	; 21
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    Timer2_stop();
    3438:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer2_stop>
}
    343c:	2e 96       	adiw	r28, 0x0e	; 14
    343e:	0f b6       	in	r0, 0x3f	; 63
    3440:	f8 94       	cli
    3442:	de bf       	out	0x3e, r29	; 62
    3444:	0f be       	out	0x3f, r0	; 63
    3446:	cd bf       	out	0x3d, r28	; 61
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <CarCon_VStop_Rotate>:

void CarCon_VStop_Rotate(void)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    DIO_WritePin(MOTOR_RIGHT_PIN,LOW);
    3456:	87 e1       	ldi	r24, 0x17	; 23
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    DIO_WritePin(MOTOR_LEFT_PIN,LOW);
    345e:	86 e1       	ldi	r24, 0x16	; 22
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
}
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	08 95       	ret

0000346c <Auto_Parking_init>:
u8 State = STATE_0;
u8 Spot = SPOT_NOTFOUND;
static volatile u32 c;

void Auto_Parking_init(void)
{
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    3474:	0e 94 1f 10 	call	0x203e	; 0x203e <DIO_Init>
	GIE_Enable();
    3478:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GIE_Enable>
	Find_Slot_init();
    347c:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <Find_Slot_init>
}
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <Auto_Parking_Runnable>:

void Auto_Parking_Runnable(void)
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
	if(Spot==SPOT_NOTFOUND)
    348e:	80 91 c3 01 	lds	r24, 0x01C3
    3492:	88 23       	and	r24, r24
    3494:	19 f4       	brne	.+6      	; 0x349c <Auto_Parking_Runnable+0x16>
	{
		Find_Slot_Runnable();
    3496:	0e 94 c8 1a 	call	0x3590	; 0x3590 <Find_Slot_Runnable>
    349a:	06 c0       	rjmp	.+12     	; 0x34a8 <Auto_Parking_Runnable+0x22>
	}
	else if(Spot==SPOT_FOUND)
    349c:	80 91 c3 01 	lds	r24, 0x01C3
    34a0:	81 30       	cpi	r24, 0x01	; 1
    34a2:	11 f4       	brne	.+4      	; 0x34a8 <Auto_Parking_Runnable+0x22>
	{
		Parking_Runnable();
    34a4:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <Parking_Runnable>
	}
	else if(Spot==Car_Parked)
	{

	}
}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <fun1>:

void fun1(void)
{
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
	c++;
    34b6:	80 91 c4 01 	lds	r24, 0x01C4
    34ba:	90 91 c5 01 	lds	r25, 0x01C5
    34be:	a0 91 c6 01 	lds	r26, 0x01C6
    34c2:	b0 91 c7 01 	lds	r27, 0x01C7
    34c6:	01 96       	adiw	r24, 0x01	; 1
    34c8:	a1 1d       	adc	r26, r1
    34ca:	b1 1d       	adc	r27, r1
    34cc:	80 93 c4 01 	sts	0x01C4, r24
    34d0:	90 93 c5 01 	sts	0x01C5, r25
    34d4:	a0 93 c6 01 	sts	0x01C6, r26
    34d8:	b0 93 c7 01 	sts	0x01C7, r27
}
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <Find_Slot_init>:

void Find_Slot_init(void)
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
	Timer0_init();
    34ea:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Timer0_init>
	Timer0_OC_InterruptEnable();
    34ee:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Timer0_OC_InterruptEnable>
	Timer0_OC_set_callbck(fun1);
    34f2:	87 e5       	ldi	r24, 0x57	; 87
    34f4:	9a e1       	ldi	r25, 0x1A	; 26
    34f6:	0e 94 86 0c 	call	0x190c	; 0x190c <Timer0_OC_set_callbck>
	Timer0_set_cmp_value(250);
    34fa:	8a ef       	ldi	r24, 0xFA	; 250
    34fc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <Timer0_set_cmp_value>
	US_init();
    3500:	0e 94 31 13 	call	0x2662	; 0x2662 <US_init>
	CarCon_Vinit();
    3504:	0e 94 2f 18 	call	0x305e	; 0x305e <CarCon_Vinit>
	while(DIO_ReadPin(BUTTON_PIN)==1);
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <DIO_ReadPin>
    350e:	81 30       	cpi	r24, 0x01	; 1
    3510:	d9 f3       	breq	.-10     	; 0x3508 <Find_Slot_init+0x26>
}
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <Car_Adjust>:

void Car_Adjust(void)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	US_get_distance(US_1,&us_rf);
    3520:	2a ec       	ldi	r18, 0xCA	; 202
    3522:	31 e0       	ldi	r19, 0x01	; 1
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	b9 01       	movw	r22, r18
    3528:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
	if(us_rf>Adjust_Distance)
    352c:	80 91 ca 01 	lds	r24, 0x01CA
    3530:	88 30       	cpi	r24, 0x08	; 8
    3532:	60 f0       	brcs	.+24     	; 0x354c <Car_Adjust+0x34>
	{
		CarCon_VTurnLeft();
    3534:	0e 94 3d 19 	call	0x327a	; 0x327a <CarCon_VTurnLeft>
		CarCon_VMoveForward(50);
    3538:	82 e3       	ldi	r24, 0x32	; 50
    353a:	0e 94 48 18 	call	0x3090	; 0x3090 <CarCon_VMoveForward>
    353e:	06 c0       	rjmp	.+12     	; 0x354c <Car_Adjust+0x34>
	}
	while(us_rf>Adjust_Distance)
	{
		US_get_distance(US_1,&us_rf);
    3540:	2a ec       	ldi	r18, 0xCA	; 202
    3542:	31 e0       	ldi	r19, 0x01	; 1
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	b9 01       	movw	r22, r18
    3548:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
	if(us_rf>Adjust_Distance)
	{
		CarCon_VTurnLeft();
		CarCon_VMoveForward(50);
	}
	while(us_rf>Adjust_Distance)
    354c:	80 91 ca 01 	lds	r24, 0x01CA
    3550:	88 30       	cpi	r24, 0x08	; 8
    3552:	b0 f7       	brcc	.-20     	; 0x3540 <Car_Adjust+0x28>
	{
		US_get_distance(US_1,&us_rf);
	}

	US_get_distance(US_2,&us_rb);
    3554:	29 ec       	ldi	r18, 0xC9	; 201
    3556:	31 e0       	ldi	r19, 0x01	; 1
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	b9 01       	movw	r22, r18
    355c:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
	if(us_rb>(Adjust_Distance+2))
    3560:	80 91 c9 01 	lds	r24, 0x01C9
    3564:	8a 30       	cpi	r24, 0x0A	; 10
    3566:	48 f0       	brcs	.+18     	; 0x357a <Car_Adjust+0x62>
	{
		CarCon_VTurnRight();
    3568:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <CarCon_VTurnRight>
    356c:	06 c0       	rjmp	.+12     	; 0x357a <Car_Adjust+0x62>
	}
	while(us_rb>(Adjust_Distance+2))
	{
		US_get_distance(US_2,&us_rb);
    356e:	29 ec       	ldi	r18, 0xC9	; 201
    3570:	31 e0       	ldi	r19, 0x01	; 1
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	b9 01       	movw	r22, r18
    3576:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
	US_get_distance(US_2,&us_rb);
	if(us_rb>(Adjust_Distance+2))
	{
		CarCon_VTurnRight();
	}
	while(us_rb>(Adjust_Distance+2))
    357a:	80 91 c9 01 	lds	r24, 0x01C9
    357e:	8a 30       	cpi	r24, 0x0A	; 10
    3580:	b0 f7       	brcc	.-20     	; 0x356e <Car_Adjust+0x56>
	{
		US_get_distance(US_2,&us_rb);
	}
	CarCon_VStop_Move();
    3582:	0e 94 78 19 	call	0x32f0	; 0x32f0 <CarCon_VStop_Move>
	CarCon_VStop_Rotate();
    3586:	0e 94 27 1a 	call	0x344e	; 0x344e <CarCon_VStop_Rotate>
}
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <Find_Slot_Runnable>:

void Find_Slot_Runnable(void)
{
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	00 d0       	rcall	.+0      	; 0x3596 <Find_Slot_Runnable+0x6>
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
	switch (State) {
    359a:	80 91 c2 01 	lds	r24, 0x01C2
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	3a 83       	std	Y+2, r19	; 0x02
    35a4:	29 83       	std	Y+1, r18	; 0x01
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	9a 81       	ldd	r25, Y+2	; 0x02
    35aa:	81 30       	cpi	r24, 0x01	; 1
    35ac:	91 05       	cpc	r25, r1
    35ae:	99 f0       	breq	.+38     	; 0x35d6 <Find_Slot_Runnable+0x46>
    35b0:	29 81       	ldd	r18, Y+1	; 0x01
    35b2:	3a 81       	ldd	r19, Y+2	; 0x02
    35b4:	22 30       	cpi	r18, 0x02	; 2
    35b6:	31 05       	cpc	r19, r1
    35b8:	e9 f0       	breq	.+58     	; 0x35f4 <Find_Slot_Runnable+0x64>
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	9a 81       	ldd	r25, Y+2	; 0x02
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	09 f0       	breq	.+2      	; 0x35c4 <Find_Slot_Runnable+0x34>
    35c2:	60 c0       	rjmp	.+192    	; 0x3684 <Find_Slot_Runnable+0xf4>
		case STATE_0:
		{
			Car_Adjust();
    35c4:	0e 94 8c 1a 	call	0x3518	; 0x3518 <Car_Adjust>
			State=STATE_1;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	80 93 c2 01 	sts	0x01C2, r24
			CarCon_VMoveForward(65);
    35ce:	81 e4       	ldi	r24, 0x41	; 65
    35d0:	0e 94 48 18 	call	0x3090	; 0x3090 <CarCon_VMoveForward>
    35d4:	57 c0       	rjmp	.+174    	; 0x3684 <Find_Slot_Runnable+0xf4>
		}
		break;

		case STATE_1:
		{
			US_get_distance(US_1,&us_rf);
    35d6:	2a ec       	ldi	r18, 0xCA	; 202
    35d8:	31 e0       	ldi	r19, 0x01	; 1
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	b9 01       	movw	r22, r18
    35de:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
			if(us_rf>MIN_DISTANCE)
    35e2:	80 91 ca 01 	lds	r24, 0x01CA
    35e6:	80 31       	cpi	r24, 0x10	; 16
    35e8:	08 f4       	brcc	.+2      	; 0x35ec <Find_Slot_Runnable+0x5c>
    35ea:	4c c0       	rjmp	.+152    	; 0x3684 <Find_Slot_Runnable+0xf4>
			{
				State=STATE_2;
    35ec:	82 e0       	ldi	r24, 0x02	; 2
    35ee:	80 93 c2 01 	sts	0x01C2, r24
    35f2:	48 c0       	rjmp	.+144    	; 0x3684 <Find_Slot_Runnable+0xf4>
		}
		break;

		case STATE_2:
		{
			Timer0_start();
    35f4:	0e 94 c7 0b 	call	0x178e	; 0x178e <Timer0_start>
    35f8:	24 c0       	rjmp	.+72     	; 0x3642 <Find_Slot_Runnable+0xb2>
			while(c<2000)
			{
				if(c%400==0)
    35fa:	80 91 c4 01 	lds	r24, 0x01C4
    35fe:	90 91 c5 01 	lds	r25, 0x01C5
    3602:	a0 91 c6 01 	lds	r26, 0x01C6
    3606:	b0 91 c7 01 	lds	r27, 0x01C7
    360a:	20 e9       	ldi	r18, 0x90	; 144
    360c:	31 e0       	ldi	r19, 0x01	; 1
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	bc 01       	movw	r22, r24
    3614:	cd 01       	movw	r24, r26
    3616:	0e 94 16 21 	call	0x422c	; 0x422c <__udivmodsi4>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	00 97       	sbiw	r24, 0x00	; 0
    3620:	a1 05       	cpc	r26, r1
    3622:	b1 05       	cpc	r27, r1
    3624:	71 f4       	brne	.+28     	; 0x3642 <Find_Slot_Runnable+0xb2>
				{
					US_get_distance(US_1,&us_rf);
    3626:	2a ec       	ldi	r18, 0xCA	; 202
    3628:	31 e0       	ldi	r19, 0x01	; 1
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	b9 01       	movw	r22, r18
    362e:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
					if(us_rf<=MIN_DISTANCE)
    3632:	80 91 ca 01 	lds	r24, 0x01CA
    3636:	80 31       	cpi	r24, 0x10	; 16
    3638:	20 f4       	brcc	.+8      	; 0x3642 <Find_Slot_Runnable+0xb2>
						{
							State=STATE_1;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	80 93 c2 01 	sts	0x01C2, r24
    3640:	10 c0       	rjmp	.+32     	; 0x3662 <Find_Slot_Runnable+0xd2>
		break;

		case STATE_2:
		{
			Timer0_start();
			while(c<2000)
    3642:	80 91 c4 01 	lds	r24, 0x01C4
    3646:	90 91 c5 01 	lds	r25, 0x01C5
    364a:	a0 91 c6 01 	lds	r26, 0x01C6
    364e:	b0 91 c7 01 	lds	r27, 0x01C7
    3652:	80 3d       	cpi	r24, 0xD0	; 208
    3654:	27 e0       	ldi	r18, 0x07	; 7
    3656:	92 07       	cpc	r25, r18
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	a2 07       	cpc	r26, r18
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	b2 07       	cpc	r27, r18
    3660:	60 f2       	brcs	.-104    	; 0x35fa <Find_Slot_Runnable+0x6a>
							State=STATE_1;
							break;
						}
				}
			}
			Timer0_stop();
    3662:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Timer0_stop>
			c=0;
    3666:	10 92 c4 01 	sts	0x01C4, r1
    366a:	10 92 c5 01 	sts	0x01C5, r1
    366e:	10 92 c6 01 	sts	0x01C6, r1
    3672:	10 92 c7 01 	sts	0x01C7, r1
			if(State!=STATE_1)
    3676:	80 91 c2 01 	lds	r24, 0x01C2
    367a:	81 30       	cpi	r24, 0x01	; 1
    367c:	19 f0       	breq	.+6      	; 0x3684 <Find_Slot_Runnable+0xf4>
			{
				Spot = SPOT_FOUND;
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	80 93 c3 01 	sts	0x01C3, r24
		break;

		default:
		break;
	}
}
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <fun2>:

void fun2(void)
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
	c++;
    3696:	80 91 c4 01 	lds	r24, 0x01C4
    369a:	90 91 c5 01 	lds	r25, 0x01C5
    369e:	a0 91 c6 01 	lds	r26, 0x01C6
    36a2:	b0 91 c7 01 	lds	r27, 0x01C7
    36a6:	01 96       	adiw	r24, 0x01	; 1
    36a8:	a1 1d       	adc	r26, r1
    36aa:	b1 1d       	adc	r27, r1
    36ac:	80 93 c4 01 	sts	0x01C4, r24
    36b0:	90 93 c5 01 	sts	0x01C5, r25
    36b4:	a0 93 c6 01 	sts	0x01C6, r26
    36b8:	b0 93 c7 01 	sts	0x01C7, r27
	if((c%3000)==0)
    36bc:	80 91 c4 01 	lds	r24, 0x01C4
    36c0:	90 91 c5 01 	lds	r25, 0x01C5
    36c4:	a0 91 c6 01 	lds	r26, 0x01C6
    36c8:	b0 91 c7 01 	lds	r27, 0x01C7
    36cc:	28 eb       	ldi	r18, 0xB8	; 184
    36ce:	3b e0       	ldi	r19, 0x0B	; 11
    36d0:	40 e0       	ldi	r20, 0x00	; 0
    36d2:	50 e0       	ldi	r21, 0x00	; 0
    36d4:	bc 01       	movw	r22, r24
    36d6:	cd 01       	movw	r24, r26
    36d8:	0e 94 16 21 	call	0x422c	; 0x422c <__udivmodsi4>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	a1 05       	cpc	r26, r1
    36e4:	b1 05       	cpc	r27, r1
    36e6:	19 f4       	brne	.+6      	; 0x36ee <fun2+0x60>
	{
		DIO_TogglePin(LED_PIN);
    36e8:	89 e0       	ldi	r24, 0x09	; 9
    36ea:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <DIO_TogglePin>
	}
}
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	08 95       	ret

000036f4 <Park_Finish>:

void Park_Finish(void)
{
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	6c 97       	sbiw	r28, 0x1c	; 28
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
	do{
		{
			US_get_distance(US_1,&us_rf);
    3708:	2a ec       	ldi	r18, 0xCA	; 202
    370a:	31 e0       	ldi	r19, 0x01	; 1
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	b9 01       	movw	r22, r18
    3710:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
			if(us_rf>Park_Distance)
    3714:	80 91 ca 01 	lds	r24, 0x01CA
    3718:	88 30       	cpi	r24, 0x08	; 8
    371a:	28 f0       	brcs	.+10     	; 0x3726 <Park_Finish+0x32>
			{
				CarCon_VTurnLeft();
    371c:	0e 94 3d 19 	call	0x327a	; 0x327a <CarCon_VTurnLeft>
				CarCon_VMoveForward(65);
    3720:	81 e4       	ldi	r24, 0x41	; 65
    3722:	0e 94 48 18 	call	0x3090	; 0x3090 <CarCon_VMoveForward>
			}

			do{
				US_get_distance(US_3,&us_f);
    3726:	28 ec       	ldi	r18, 0xC8	; 200
    3728:	31 e0       	ldi	r19, 0x01	; 1
    372a:	82 e0       	ldi	r24, 0x02	; 2
    372c:	b9 01       	movw	r22, r18
    372e:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				US_get_distance(US_1,&us_rf);
    3732:	2a ec       	ldi	r18, 0xCA	; 202
    3734:	31 e0       	ldi	r19, 0x01	; 1
    3736:	80 e0       	ldi	r24, 0x00	; 0
    3738:	b9 01       	movw	r22, r18
    373a:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				}while((us_f>Front_Distance)&&(us_rf>Park_Distance));
    373e:	80 91 c8 01 	lds	r24, 0x01C8
    3742:	8d 30       	cpi	r24, 0x0D	; 13
    3744:	20 f0       	brcs	.+8      	; 0x374e <Park_Finish+0x5a>
    3746:	80 91 ca 01 	lds	r24, 0x01CA
    374a:	88 30       	cpi	r24, 0x08	; 8
    374c:	60 f7       	brcc	.-40     	; 0x3726 <Park_Finish+0x32>

			US_get_distance(US_2,&us_rb);
    374e:	29 ec       	ldi	r18, 0xC9	; 201
    3750:	31 e0       	ldi	r19, 0x01	; 1
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	b9 01       	movw	r22, r18
    3756:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
			if(us_rb>Park_Distance)
    375a:	80 91 c9 01 	lds	r24, 0x01C9
    375e:	88 30       	cpi	r24, 0x08	; 8
    3760:	10 f0       	brcs	.+4      	; 0x3766 <Park_Finish+0x72>
			{
				CarCon_VTurnRight();
    3762:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <CarCon_VTurnRight>
			}

			do{
				US_get_distance(US_3,&us_f);
    3766:	28 ec       	ldi	r18, 0xC8	; 200
    3768:	31 e0       	ldi	r19, 0x01	; 1
    376a:	82 e0       	ldi	r24, 0x02	; 2
    376c:	b9 01       	movw	r22, r18
    376e:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				US_get_distance(US_2,&us_rb);
    3772:	29 ec       	ldi	r18, 0xC9	; 201
    3774:	31 e0       	ldi	r19, 0x01	; 1
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	b9 01       	movw	r22, r18
    377a:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				}while((us_f>Front_Min)&&(us_rb>Park_Distance+1));
    377e:	80 91 c8 01 	lds	r24, 0x01C8
    3782:	88 30       	cpi	r24, 0x08	; 8
    3784:	20 f0       	brcs	.+8      	; 0x378e <Park_Finish+0x9a>
    3786:	80 91 c9 01 	lds	r24, 0x01C9
    378a:	89 30       	cpi	r24, 0x09	; 9
    378c:	60 f7       	brcc	.-40     	; 0x3766 <Park_Finish+0x72>

			CarCon_VMoveBackward(65);
    378e:	81 e4       	ldi	r24, 0x41	; 65
    3790:	0e 94 62 18 	call	0x30c4	; 0x30c4 <CarCon_VMoveBackward>
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	a8 ec       	ldi	r26, 0xC8	; 200
    379a:	b2 e4       	ldi	r27, 0x42	; 66
    379c:	89 8f       	std	Y+25, r24	; 0x19
    379e:	9a 8f       	std	Y+26, r25	; 0x1a
    37a0:	ab 8f       	std	Y+27, r26	; 0x1b
    37a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a4:	69 8d       	ldd	r22, Y+25	; 0x19
    37a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	4a ef       	ldi	r20, 0xFA	; 250
    37b2:	54 e4       	ldi	r21, 0x44	; 68
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	8d 8b       	std	Y+21, r24	; 0x15
    37be:	9e 8b       	std	Y+22, r25	; 0x16
    37c0:	af 8b       	std	Y+23, r26	; 0x17
    37c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37c4:	6d 89       	ldd	r22, Y+21	; 0x15
    37c6:	7e 89       	ldd	r23, Y+22	; 0x16
    37c8:	8f 89       	ldd	r24, Y+23	; 0x17
    37ca:	98 8d       	ldd	r25, Y+24	; 0x18
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e8       	ldi	r20, 0x80	; 128
    37d2:	5f e3       	ldi	r21, 0x3F	; 63
    37d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37d8:	88 23       	and	r24, r24
    37da:	2c f4       	brge	.+10     	; 0x37e6 <Park_Finish+0xf2>
		__ticks = 1;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	9c 8b       	std	Y+20, r25	; 0x14
    37e2:	8b 8b       	std	Y+19, r24	; 0x13
    37e4:	3f c0       	rjmp	.+126    	; 0x3864 <Park_Finish+0x170>
	else if (__tmp > 65535)
    37e6:	6d 89       	ldd	r22, Y+21	; 0x15
    37e8:	7e 89       	ldd	r23, Y+22	; 0x16
    37ea:	8f 89       	ldd	r24, Y+23	; 0x17
    37ec:	98 8d       	ldd	r25, Y+24	; 0x18
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	3f ef       	ldi	r19, 0xFF	; 255
    37f2:	4f e7       	ldi	r20, 0x7F	; 127
    37f4:	57 e4       	ldi	r21, 0x47	; 71
    37f6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37fa:	18 16       	cp	r1, r24
    37fc:	4c f5       	brge	.+82     	; 0x3850 <Park_Finish+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9c 8b       	std	Y+20, r25	; 0x14
    3824:	8b 8b       	std	Y+19, r24	; 0x13
    3826:	0f c0       	rjmp	.+30     	; 0x3846 <Park_Finish+0x152>
    3828:	88 ec       	ldi	r24, 0xC8	; 200
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	9a 8b       	std	Y+18, r25	; 0x12
    382e:	89 8b       	std	Y+17, r24	; 0x11
    3830:	89 89       	ldd	r24, Y+17	; 0x11
    3832:	9a 89       	ldd	r25, Y+18	; 0x12
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <Park_Finish+0x140>
    3838:	9a 8b       	std	Y+18, r25	; 0x12
    383a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383c:	8b 89       	ldd	r24, Y+19	; 0x13
    383e:	9c 89       	ldd	r25, Y+20	; 0x14
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	9c 8b       	std	Y+20, r25	; 0x14
    3844:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3846:	8b 89       	ldd	r24, Y+19	; 0x13
    3848:	9c 89       	ldd	r25, Y+20	; 0x14
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	69 f7       	brne	.-38     	; 0x3828 <Park_Finish+0x134>
    384e:	14 c0       	rjmp	.+40     	; 0x3878 <Park_Finish+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3850:	6d 89       	ldd	r22, Y+21	; 0x15
    3852:	7e 89       	ldd	r23, Y+22	; 0x16
    3854:	8f 89       	ldd	r24, Y+23	; 0x17
    3856:	98 8d       	ldd	r25, Y+24	; 0x18
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9c 8b       	std	Y+20, r25	; 0x14
    3862:	8b 8b       	std	Y+19, r24	; 0x13
    3864:	8b 89       	ldd	r24, Y+19	; 0x13
    3866:	9c 89       	ldd	r25, Y+20	; 0x14
    3868:	98 8b       	std	Y+16, r25	; 0x10
    386a:	8f 87       	std	Y+15, r24	; 0x0f
    386c:	8f 85       	ldd	r24, Y+15	; 0x0f
    386e:	98 89       	ldd	r25, Y+16	; 0x10
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <Park_Finish+0x17c>
    3874:	98 8b       	std	Y+16, r25	; 0x10
    3876:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			CarCon_VStop_Move();
    3878:	0e 94 78 19 	call	0x32f0	; 0x32f0 <CarCon_VStop_Move>
		}

		{
			US_get_distance(US_2,&us_rb);
    387c:	29 ec       	ldi	r18, 0xC9	; 201
    387e:	31 e0       	ldi	r19, 0x01	; 1
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	b9 01       	movw	r22, r18
    3884:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
			if(us_rb>Park_Distance)
    3888:	80 91 c9 01 	lds	r24, 0x01C9
    388c:	88 30       	cpi	r24, 0x08	; 8
    388e:	28 f0       	brcs	.+10     	; 0x389a <Park_Finish+0x1a6>
			{
				CarCon_VTurnLeft();
    3890:	0e 94 3d 19 	call	0x327a	; 0x327a <CarCon_VTurnLeft>
				CarCon_VMoveBackward(65);
    3894:	81 e4       	ldi	r24, 0x41	; 65
    3896:	0e 94 62 18 	call	0x30c4	; 0x30c4 <CarCon_VMoveBackward>
			}

			do{
				US_get_distance(US_4,&us_b);
    389a:	2b ec       	ldi	r18, 0xCB	; 203
    389c:	31 e0       	ldi	r19, 0x01	; 1
    389e:	83 e0       	ldi	r24, 0x03	; 3
    38a0:	b9 01       	movw	r22, r18
    38a2:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				US_get_distance(US_2,&us_rb);
    38a6:	29 ec       	ldi	r18, 0xC9	; 201
    38a8:	31 e0       	ldi	r19, 0x01	; 1
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	b9 01       	movw	r22, r18
    38ae:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				}while((us_b>Front_Distance)&&(us_rb>Park_Distance));
    38b2:	80 91 cb 01 	lds	r24, 0x01CB
    38b6:	8d 30       	cpi	r24, 0x0D	; 13
    38b8:	20 f0       	brcs	.+8      	; 0x38c2 <Park_Finish+0x1ce>
    38ba:	80 91 c9 01 	lds	r24, 0x01C9
    38be:	88 30       	cpi	r24, 0x08	; 8
    38c0:	60 f7       	brcc	.-40     	; 0x389a <Park_Finish+0x1a6>

			US_get_distance(US_1,&us_rf);
    38c2:	2a ec       	ldi	r18, 0xCA	; 202
    38c4:	31 e0       	ldi	r19, 0x01	; 1
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	b9 01       	movw	r22, r18
    38ca:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
			if(us_rf>Park_Distance)
    38ce:	80 91 ca 01 	lds	r24, 0x01CA
    38d2:	88 30       	cpi	r24, 0x08	; 8
    38d4:	10 f0       	brcs	.+4      	; 0x38da <Park_Finish+0x1e6>
			{
				CarCon_VTurnRight();
    38d6:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <CarCon_VTurnRight>
			}

			do{
				US_get_distance(US_4,&us_b);
    38da:	2b ec       	ldi	r18, 0xCB	; 203
    38dc:	31 e0       	ldi	r19, 0x01	; 1
    38de:	83 e0       	ldi	r24, 0x03	; 3
    38e0:	b9 01       	movw	r22, r18
    38e2:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				US_get_distance(US_1,&us_rf);
    38e6:	2a ec       	ldi	r18, 0xCA	; 202
    38e8:	31 e0       	ldi	r19, 0x01	; 1
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	b9 01       	movw	r22, r18
    38ee:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
				}while((us_b>Front_Min)&&(us_rf>Park_Distance+1));
    38f2:	80 91 cb 01 	lds	r24, 0x01CB
    38f6:	88 30       	cpi	r24, 0x08	; 8
    38f8:	20 f0       	brcs	.+8      	; 0x3902 <Park_Finish+0x20e>
    38fa:	80 91 ca 01 	lds	r24, 0x01CA
    38fe:	89 30       	cpi	r24, 0x09	; 9
    3900:	60 f7       	brcc	.-40     	; 0x38da <Park_Finish+0x1e6>

			CarCon_VMoveBackward(65);
    3902:	81 e4       	ldi	r24, 0x41	; 65
    3904:	0e 94 62 18 	call	0x30c4	; 0x30c4 <CarCon_VMoveBackward>
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	a8 ec       	ldi	r26, 0xC8	; 200
    390e:	b2 e4       	ldi	r27, 0x42	; 66
    3910:	8b 87       	std	Y+11, r24	; 0x0b
    3912:	9c 87       	std	Y+12, r25	; 0x0c
    3914:	ad 87       	std	Y+13, r26	; 0x0d
    3916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3918:	6b 85       	ldd	r22, Y+11	; 0x0b
    391a:	7c 85       	ldd	r23, Y+12	; 0x0c
    391c:	8d 85       	ldd	r24, Y+13	; 0x0d
    391e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	4a ef       	ldi	r20, 0xFA	; 250
    3926:	54 e4       	ldi	r21, 0x44	; 68
    3928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	8f 83       	std	Y+7, r24	; 0x07
    3932:	98 87       	std	Y+8, r25	; 0x08
    3934:	a9 87       	std	Y+9, r26	; 0x09
    3936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3938:	6f 81       	ldd	r22, Y+7	; 0x07
    393a:	78 85       	ldd	r23, Y+8	; 0x08
    393c:	89 85       	ldd	r24, Y+9	; 0x09
    393e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e8       	ldi	r20, 0x80	; 128
    3946:	5f e3       	ldi	r21, 0x3F	; 63
    3948:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    394c:	88 23       	and	r24, r24
    394e:	2c f4       	brge	.+10     	; 0x395a <Park_Finish+0x266>
		__ticks = 1;
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
    3958:	3f c0       	rjmp	.+126    	; 0x39d8 <Park_Finish+0x2e4>
	else if (__tmp > 65535)
    395a:	6f 81       	ldd	r22, Y+7	; 0x07
    395c:	78 85       	ldd	r23, Y+8	; 0x08
    395e:	89 85       	ldd	r24, Y+9	; 0x09
    3960:	9a 85       	ldd	r25, Y+10	; 0x0a
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	3f ef       	ldi	r19, 0xFF	; 255
    3966:	4f e7       	ldi	r20, 0x7F	; 127
    3968:	57 e4       	ldi	r21, 0x47	; 71
    396a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    396e:	18 16       	cp	r1, r24
    3970:	4c f5       	brge	.+82     	; 0x39c4 <Park_Finish+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3972:	6b 85       	ldd	r22, Y+11	; 0x0b
    3974:	7c 85       	ldd	r23, Y+12	; 0x0c
    3976:	8d 85       	ldd	r24, Y+13	; 0x0d
    3978:	9e 85       	ldd	r25, Y+14	; 0x0e
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	40 e2       	ldi	r20, 0x20	; 32
    3980:	51 e4       	ldi	r21, 0x41	; 65
    3982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	9e 83       	std	Y+6, r25	; 0x06
    3998:	8d 83       	std	Y+5, r24	; 0x05
    399a:	0f c0       	rjmp	.+30     	; 0x39ba <Park_Finish+0x2c6>
    399c:	88 ec       	ldi	r24, 0xC8	; 200
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	9c 83       	std	Y+4, r25	; 0x04
    39a2:	8b 83       	std	Y+3, r24	; 0x03
    39a4:	8b 81       	ldd	r24, Y+3	; 0x03
    39a6:	9c 81       	ldd	r25, Y+4	; 0x04
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	f1 f7       	brne	.-4      	; 0x39a8 <Park_Finish+0x2b4>
    39ac:	9c 83       	std	Y+4, r25	; 0x04
    39ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	9e 81       	ldd	r25, Y+6	; 0x06
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	9e 83       	std	Y+6, r25	; 0x06
    39b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	00 97       	sbiw	r24, 0x00	; 0
    39c0:	69 f7       	brne	.-38     	; 0x399c <Park_Finish+0x2a8>
    39c2:	14 c0       	rjmp	.+40     	; 0x39ec <Park_Finish+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c4:	6f 81       	ldd	r22, Y+7	; 0x07
    39c6:	78 85       	ldd	r23, Y+8	; 0x08
    39c8:	89 85       	ldd	r24, Y+9	; 0x09
    39ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    39cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	9e 83       	std	Y+6, r25	; 0x06
    39d6:	8d 83       	std	Y+5, r24	; 0x05
    39d8:	8d 81       	ldd	r24, Y+5	; 0x05
    39da:	9e 81       	ldd	r25, Y+6	; 0x06
    39dc:	9a 83       	std	Y+2, r25	; 0x02
    39de:	89 83       	std	Y+1, r24	; 0x01
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	9a 81       	ldd	r25, Y+2	; 0x02
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <Park_Finish+0x2f0>
    39e8:	9a 83       	std	Y+2, r25	; 0x02
    39ea:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			CarCon_VStop_Move();
    39ec:	0e 94 78 19 	call	0x32f0	; 0x32f0 <CarCon_VStop_Move>

			US_get_distance(US_1,&us_rf);
    39f0:	2a ec       	ldi	r18, 0xCA	; 202
    39f2:	31 e0       	ldi	r19, 0x01	; 1
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	b9 01       	movw	r22, r18
    39f8:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
			US_get_distance(US_2,&us_rb);
    39fc:	29 ec       	ldi	r18, 0xC9	; 201
    39fe:	31 e0       	ldi	r19, 0x01	; 1
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	b9 01       	movw	r22, r18
    3a04:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
			}
		}while((us_rf>Park_Distance)||(us_rb>Park_Distance)||(((us_rf-us_rb)>=6)&&((us_rb-us_rf)>=6)));
    3a08:	80 91 ca 01 	lds	r24, 0x01CA
    3a0c:	88 30       	cpi	r24, 0x08	; 8
    3a0e:	08 f0       	brcs	.+2      	; 0x3a12 <Park_Finish+0x31e>
    3a10:	7b ce       	rjmp	.-778    	; 0x3708 <Park_Finish+0x14>
    3a12:	80 91 c9 01 	lds	r24, 0x01C9
    3a16:	88 30       	cpi	r24, 0x08	; 8
    3a18:	08 f0       	brcs	.+2      	; 0x3a1c <Park_Finish+0x328>
    3a1a:	76 ce       	rjmp	.-788    	; 0x3708 <Park_Finish+0x14>
    3a1c:	80 91 ca 01 	lds	r24, 0x01CA
    3a20:	28 2f       	mov	r18, r24
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	80 91 c9 01 	lds	r24, 0x01C9
    3a28:	88 2f       	mov	r24, r24
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	a9 01       	movw	r20, r18
    3a2e:	48 1b       	sub	r20, r24
    3a30:	59 0b       	sbc	r21, r25
    3a32:	ca 01       	movw	r24, r20
    3a34:	86 30       	cpi	r24, 0x06	; 6
    3a36:	91 05       	cpc	r25, r1
    3a38:	84 f0       	brlt	.+32     	; 0x3a5a <Park_Finish+0x366>
    3a3a:	80 91 c9 01 	lds	r24, 0x01C9
    3a3e:	28 2f       	mov	r18, r24
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	80 91 ca 01 	lds	r24, 0x01CA
    3a46:	88 2f       	mov	r24, r24
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	a9 01       	movw	r20, r18
    3a4c:	48 1b       	sub	r20, r24
    3a4e:	59 0b       	sbc	r21, r25
    3a50:	ca 01       	movw	r24, r20
    3a52:	86 30       	cpi	r24, 0x06	; 6
    3a54:	91 05       	cpc	r25, r1
    3a56:	0c f0       	brlt	.+2      	; 0x3a5a <Park_Finish+0x366>
    3a58:	57 ce       	rjmp	.-850    	; 0x3708 <Park_Finish+0x14>

	CarCon_VStop_Rotate();
    3a5a:	0e 94 27 1a 	call	0x344e	; 0x344e <CarCon_VStop_Rotate>
	if(us_rb>Adjust_Distance)
    3a5e:	80 91 c9 01 	lds	r24, 0x01C9
    3a62:	88 30       	cpi	r24, 0x08	; 8
    3a64:	50 f0       	brcs	.+20     	; 0x3a7a <Park_Finish+0x386>
	{
		CarCon_VMoveBackward(55);
    3a66:	87 e3       	ldi	r24, 0x37	; 55
    3a68:	0e 94 62 18 	call	0x30c4	; 0x30c4 <CarCon_VMoveBackward>
    3a6c:	06 c0       	rjmp	.+12     	; 0x3a7a <Park_Finish+0x386>
	}
	while(us_b>12)
	{
		US_get_distance(US_4,&us_b);
    3a6e:	2b ec       	ldi	r18, 0xCB	; 203
    3a70:	31 e0       	ldi	r19, 0x01	; 1
    3a72:	83 e0       	ldi	r24, 0x03	; 3
    3a74:	b9 01       	movw	r22, r18
    3a76:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
	CarCon_VStop_Rotate();
	if(us_rb>Adjust_Distance)
	{
		CarCon_VMoveBackward(55);
	}
	while(us_b>12)
    3a7a:	80 91 cb 01 	lds	r24, 0x01CB
    3a7e:	8d 30       	cpi	r24, 0x0D	; 13
    3a80:	b0 f7       	brcc	.-20     	; 0x3a6e <Park_Finish+0x37a>
	{
		US_get_distance(US_4,&us_b);
	}
	CarCon_VStop_Move();
    3a82:	0e 94 78 19 	call	0x32f0	; 0x32f0 <CarCon_VStop_Move>
}
    3a86:	6c 96       	adiw	r28, 0x1c	; 28
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	de bf       	out	0x3e, r29	; 62
    3a8e:	0f be       	out	0x3f, r0	; 63
    3a90:	cd bf       	out	0x3d, r28	; 61
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <Parking_Runnable>:

void Parking_Runnable(void)
{
    3a98:	0f 93       	push	r16
    3a9a:	1f 93       	push	r17
    3a9c:	df 93       	push	r29
    3a9e:	cf 93       	push	r28
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62
    3aa4:	c4 55       	subi	r28, 0x54	; 84
    3aa6:	d0 40       	sbci	r29, 0x00	; 0
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
	Timer0_start();
    3ab2:	0e 94 c7 0b 	call	0x178e	; 0x178e <Timer0_start>
	c=0;
    3ab6:	10 92 c4 01 	sts	0x01C4, r1
    3aba:	10 92 c5 01 	sts	0x01C5, r1
    3abe:	10 92 c6 01 	sts	0x01C6, r1
    3ac2:	10 92 c7 01 	sts	0x01C7, r1
	do{
		US_get_distance(US_2,&us_rb);
    3ac6:	29 ec       	ldi	r18, 0xC9	; 201
    3ac8:	31 e0       	ldi	r19, 0x01	; 1
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	b9 01       	movw	r22, r18
    3ace:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
		}while((us_rb>10)&&(c<1000));
    3ad2:	80 91 c9 01 	lds	r24, 0x01C9
    3ad6:	8b 30       	cpi	r24, 0x0B	; 11
    3ad8:	80 f0       	brcs	.+32     	; 0x3afa <Parking_Runnable+0x62>
    3ada:	80 91 c4 01 	lds	r24, 0x01C4
    3ade:	90 91 c5 01 	lds	r25, 0x01C5
    3ae2:	a0 91 c6 01 	lds	r26, 0x01C6
    3ae6:	b0 91 c7 01 	lds	r27, 0x01C7
    3aea:	88 3e       	cpi	r24, 0xE8	; 232
    3aec:	23 e0       	ldi	r18, 0x03	; 3
    3aee:	92 07       	cpc	r25, r18
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	a2 07       	cpc	r26, r18
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	b2 07       	cpc	r27, r18
    3af8:	30 f3       	brcs	.-52     	; 0x3ac6 <Parking_Runnable+0x2e>
	Timer0_stop();
    3afa:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Timer0_stop>
	c=0;
    3afe:	10 92 c4 01 	sts	0x01C4, r1
    3b02:	10 92 c5 01 	sts	0x01C5, r1
    3b06:	10 92 c6 01 	sts	0x01C6, r1
    3b0a:	10 92 c7 01 	sts	0x01C7, r1

	CarCon_VStop_Move_duty();
    3b0e:	0e 94 89 19 	call	0x3312	; 0x3312 <CarCon_VStop_Move_duty>
    3b12:	fe 01       	movw	r30, r28
    3b14:	ef 5a       	subi	r30, 0xAF	; 175
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	a0 ef       	ldi	r26, 0xF0	; 240
    3b1e:	b1 e4       	ldi	r27, 0x41	; 65
    3b20:	80 83       	st	Z, r24
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	a2 83       	std	Z+2, r26	; 0x02
    3b26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b28:	8e 01       	movw	r16, r28
    3b2a:	03 5b       	subi	r16, 0xB3	; 179
    3b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2e:	fe 01       	movw	r30, r28
    3b30:	ef 5a       	subi	r30, 0xAF	; 175
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	60 81       	ld	r22, Z
    3b36:	71 81       	ldd	r23, Z+1	; 0x01
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	4a ef       	ldi	r20, 0xFA	; 250
    3b42:	54 e4       	ldi	r21, 0x44	; 68
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	f8 01       	movw	r30, r16
    3b4e:	80 83       	st	Z, r24
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	a2 83       	std	Z+2, r26	; 0x02
    3b54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b56:	fe 01       	movw	r30, r28
    3b58:	e3 5b       	subi	r30, 0xB3	; 179
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b70:	88 23       	and	r24, r24
    3b72:	44 f4       	brge	.+16     	; 0x3b84 <Parking_Runnable+0xec>
		__ticks = 1;
    3b74:	fe 01       	movw	r30, r28
    3b76:	e5 5b       	subi	r30, 0xB5	; 181
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	91 83       	std	Z+1, r25	; 0x01
    3b80:	80 83       	st	Z, r24
    3b82:	64 c0       	rjmp	.+200    	; 0x3c4c <Parking_Runnable+0x1b4>
	else if (__tmp > 65535)
    3b84:	fe 01       	movw	r30, r28
    3b86:	e3 5b       	subi	r30, 0xB3	; 179
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	60 81       	ld	r22, Z
    3b8c:	71 81       	ldd	r23, Z+1	; 0x01
    3b8e:	82 81       	ldd	r24, Z+2	; 0x02
    3b90:	93 81       	ldd	r25, Z+3	; 0x03
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	3f ef       	ldi	r19, 0xFF	; 255
    3b96:	4f e7       	ldi	r20, 0x7F	; 127
    3b98:	57 e4       	ldi	r21, 0x47	; 71
    3b9a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b9e:	18 16       	cp	r1, r24
    3ba0:	0c f0       	brlt	.+2      	; 0x3ba4 <Parking_Runnable+0x10c>
    3ba2:	43 c0       	rjmp	.+134    	; 0x3c2a <Parking_Runnable+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ef 5a       	subi	r30, 0xAF	; 175
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	60 81       	ld	r22, Z
    3bac:	71 81       	ldd	r23, Z+1	; 0x01
    3bae:	82 81       	ldd	r24, Z+2	; 0x02
    3bb0:	93 81       	ldd	r25, Z+3	; 0x03
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e2       	ldi	r20, 0x20	; 32
    3bb8:	51 e4       	ldi	r21, 0x41	; 65
    3bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	8e 01       	movw	r16, r28
    3bc4:	05 5b       	subi	r16, 0xB5	; 181
    3bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	f8 01       	movw	r30, r16
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	80 83       	st	Z, r24
    3bda:	1f c0       	rjmp	.+62     	; 0x3c1a <Parking_Runnable+0x182>
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e7 5b       	subi	r30, 0xB7	; 183
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	88 ec       	ldi	r24, 0xC8	; 200
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	91 83       	std	Z+1, r25	; 0x01
    3be8:	80 83       	st	Z, r24
    3bea:	fe 01       	movw	r30, r28
    3bec:	e7 5b       	subi	r30, 0xB7	; 183
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <Parking_Runnable+0x15c>
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e7 5b       	subi	r30, 0xB7	; 183
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c02:	de 01       	movw	r26, r28
    3c04:	a5 5b       	subi	r26, 0xB5	; 181
    3c06:	bf 4f       	sbci	r27, 0xFF	; 255
    3c08:	fe 01       	movw	r30, r28
    3c0a:	e5 5b       	subi	r30, 0xB5	; 181
    3c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0e:	80 81       	ld	r24, Z
    3c10:	91 81       	ldd	r25, Z+1	; 0x01
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	11 96       	adiw	r26, 0x01	; 1
    3c16:	9c 93       	st	X, r25
    3c18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e5 5b       	subi	r30, 0xB5	; 181
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	00 97       	sbiw	r24, 0x00	; 0
    3c26:	d1 f6       	brne	.-76     	; 0x3bdc <Parking_Runnable+0x144>
    3c28:	27 c0       	rjmp	.+78     	; 0x3c78 <Parking_Runnable+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2a:	8e 01       	movw	r16, r28
    3c2c:	05 5b       	subi	r16, 0xB5	; 181
    3c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	e3 5b       	subi	r30, 0xB3	; 179
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	60 81       	ld	r22, Z
    3c38:	71 81       	ldd	r23, Z+1	; 0x01
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	f8 01       	movw	r30, r16
    3c48:	91 83       	std	Z+1, r25	; 0x01
    3c4a:	80 83       	st	Z, r24
    3c4c:	de 01       	movw	r26, r28
    3c4e:	a9 5b       	subi	r26, 0xB9	; 185
    3c50:	bf 4f       	sbci	r27, 0xFF	; 255
    3c52:	fe 01       	movw	r30, r28
    3c54:	e5 5b       	subi	r30, 0xB5	; 181
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	80 81       	ld	r24, Z
    3c5a:	91 81       	ldd	r25, Z+1	; 0x01
    3c5c:	8d 93       	st	X+, r24
    3c5e:	9c 93       	st	X, r25
    3c60:	fe 01       	movw	r30, r28
    3c62:	e9 5b       	subi	r30, 0xB9	; 185
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <Parking_Runnable+0x1d2>
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e9 5b       	subi	r30, 0xB9	; 185
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	91 83       	std	Z+1, r25	; 0x01
    3c76:	80 83       	st	Z, r24
	_delay_ms(30);
	CarCon_VTurnRight();
    3c78:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <CarCon_VTurnRight>
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	ed 5b       	subi	r30, 0xBD	; 189
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	a8 e4       	ldi	r26, 0x48	; 72
    3c88:	b2 e4       	ldi	r27, 0x42	; 66
    3c8a:	80 83       	st	Z, r24
    3c8c:	91 83       	std	Z+1, r25	; 0x01
    3c8e:	a2 83       	std	Z+2, r26	; 0x02
    3c90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c92:	8e 01       	movw	r16, r28
    3c94:	01 5c       	subi	r16, 0xC1	; 193
    3c96:	1f 4f       	sbci	r17, 0xFF	; 255
    3c98:	fe 01       	movw	r30, r28
    3c9a:	ed 5b       	subi	r30, 0xBD	; 189
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	60 81       	ld	r22, Z
    3ca0:	71 81       	ldd	r23, Z+1	; 0x01
    3ca2:	82 81       	ldd	r24, Z+2	; 0x02
    3ca4:	93 81       	ldd	r25, Z+3	; 0x03
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	4a ef       	ldi	r20, 0xFA	; 250
    3cac:	54 e4       	ldi	r21, 0x44	; 68
    3cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	80 83       	st	Z, r24
    3cba:	91 83       	std	Z+1, r25	; 0x01
    3cbc:	a2 83       	std	Z+2, r26	; 0x02
    3cbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	ff 96       	adiw	r30, 0x3f	; 63
    3cc4:	60 81       	ld	r22, Z
    3cc6:	71 81       	ldd	r23, Z+1	; 0x01
    3cc8:	82 81       	ldd	r24, Z+2	; 0x02
    3cca:	93 81       	ldd	r25, Z+3	; 0x03
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e8       	ldi	r20, 0x80	; 128
    3cd2:	5f e3       	ldi	r21, 0x3F	; 63
    3cd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cd8:	88 23       	and	r24, r24
    3cda:	2c f4       	brge	.+10     	; 0x3ce6 <Parking_Runnable+0x24e>
		__ticks = 1;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	9e af       	std	Y+62, r25	; 0x3e
    3ce2:	8d af       	std	Y+61, r24	; 0x3d
    3ce4:	46 c0       	rjmp	.+140    	; 0x3d72 <Parking_Runnable+0x2da>
	else if (__tmp > 65535)
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	ff 96       	adiw	r30, 0x3f	; 63
    3cea:	60 81       	ld	r22, Z
    3cec:	71 81       	ldd	r23, Z+1	; 0x01
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	3f ef       	ldi	r19, 0xFF	; 255
    3cf6:	4f e7       	ldi	r20, 0x7F	; 127
    3cf8:	57 e4       	ldi	r21, 0x47	; 71
    3cfa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3cfe:	18 16       	cp	r1, r24
    3d00:	64 f5       	brge	.+88     	; 0x3d5a <Parking_Runnable+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d02:	fe 01       	movw	r30, r28
    3d04:	ed 5b       	subi	r30, 0xBD	; 189
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	60 81       	ld	r22, Z
    3d0a:	71 81       	ldd	r23, Z+1	; 0x01
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	93 81       	ldd	r25, Z+3	; 0x03
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e2       	ldi	r20, 0x20	; 32
    3d16:	51 e4       	ldi	r21, 0x41	; 65
    3d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	9e af       	std	Y+62, r25	; 0x3e
    3d2e:	8d af       	std	Y+61, r24	; 0x3d
    3d30:	0f c0       	rjmp	.+30     	; 0x3d50 <Parking_Runnable+0x2b8>
    3d32:	88 ec       	ldi	r24, 0xC8	; 200
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	9c af       	std	Y+60, r25	; 0x3c
    3d38:	8b af       	std	Y+59, r24	; 0x3b
    3d3a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d3c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <Parking_Runnable+0x2a6>
    3d42:	9c af       	std	Y+60, r25	; 0x3c
    3d44:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d46:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d48:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	9e af       	std	Y+62, r25	; 0x3e
    3d4e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d50:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d52:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d54:	00 97       	sbiw	r24, 0x00	; 0
    3d56:	69 f7       	brne	.-38     	; 0x3d32 <Parking_Runnable+0x29a>
    3d58:	16 c0       	rjmp	.+44     	; 0x3d86 <Parking_Runnable+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ff 96       	adiw	r30, 0x3f	; 63
    3d5e:	60 81       	ld	r22, Z
    3d60:	71 81       	ldd	r23, Z+1	; 0x01
    3d62:	82 81       	ldd	r24, Z+2	; 0x02
    3d64:	93 81       	ldd	r25, Z+3	; 0x03
    3d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	9e af       	std	Y+62, r25	; 0x3e
    3d70:	8d af       	std	Y+61, r24	; 0x3d
    3d72:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d74:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d76:	9a af       	std	Y+58, r25	; 0x3a
    3d78:	89 af       	std	Y+57, r24	; 0x39
    3d7a:	89 ad       	ldd	r24, Y+57	; 0x39
    3d7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <Parking_Runnable+0x2e6>
    3d82:	9a af       	std	Y+58, r25	; 0x3a
    3d84:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	CarCon_VTurnLeft();
    3d86:	0e 94 3d 19 	call	0x327a	; 0x327a <CarCon_VTurnLeft>
	c=0;
    3d8a:	10 92 c4 01 	sts	0x01C4, r1
    3d8e:	10 92 c5 01 	sts	0x01C5, r1
    3d92:	10 92 c6 01 	sts	0x01C6, r1
    3d96:	10 92 c7 01 	sts	0x01C7, r1
	Timer0_OC_set_callbck(fun2);
    3d9a:	87 e4       	ldi	r24, 0x47	; 71
    3d9c:	9b e1       	ldi	r25, 0x1B	; 27
    3d9e:	0e 94 86 0c 	call	0x190c	; 0x190c <Timer0_OC_set_callbck>
	Timer0_start();
    3da2:	0e 94 c7 0b 	call	0x178e	; 0x178e <Timer0_start>
	DIO_WritePin(LED_PIN,HIGH);
    3da6:	89 e0       	ldi	r24, 0x09	; 9
    3da8:	61 e0       	ldi	r22, 0x01	; 1
    3daa:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>

	CarCon_VMoveBackward(65);
    3dae:	81 e4       	ldi	r24, 0x41	; 65
    3db0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <CarCon_VMoveBackward>
	do{
		US_get_distance(US_4,&us_b);
    3db4:	2b ec       	ldi	r18, 0xCB	; 203
    3db6:	31 e0       	ldi	r19, 0x01	; 1
    3db8:	83 e0       	ldi	r24, 0x03	; 3
    3dba:	b9 01       	movw	r22, r18
    3dbc:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
	}while (us_b > 35 );
    3dc0:	80 91 cb 01 	lds	r24, 0x01CB
    3dc4:	84 32       	cpi	r24, 0x24	; 36
    3dc6:	b0 f7       	brcc	.-20     	; 0x3db4 <Parking_Runnable+0x31c>

	CarCon_VTurnRight();
    3dc8:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <CarCon_VTurnRight>
	do{
		US_get_distance(US_4,&us_b);
    3dcc:	2b ec       	ldi	r18, 0xCB	; 203
    3dce:	31 e0       	ldi	r19, 0x01	; 1
    3dd0:	83 e0       	ldi	r24, 0x03	; 3
    3dd2:	b9 01       	movw	r22, r18
    3dd4:	0e 94 44 13 	call	0x2688	; 0x2688 <US_get_distance>
	}while (us_b > 7);
    3dd8:	80 91 cb 01 	lds	r24, 0x01CB
    3ddc:	88 30       	cpi	r24, 0x08	; 8
    3dde:	b0 f7       	brcc	.-20     	; 0x3dcc <Parking_Runnable+0x334>

	CarCon_VMoveForward(50);
    3de0:	82 e3       	ldi	r24, 0x32	; 50
    3de2:	0e 94 48 18 	call	0x3090	; 0x3090 <CarCon_VMoveForward>
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	a0 ea       	ldi	r26, 0xA0	; 160
    3dec:	b1 e4       	ldi	r27, 0x41	; 65
    3dee:	8d ab       	std	Y+53, r24	; 0x35
    3df0:	9e ab       	std	Y+54, r25	; 0x36
    3df2:	af ab       	std	Y+55, r26	; 0x37
    3df4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df6:	6d a9       	ldd	r22, Y+53	; 0x35
    3df8:	7e a9       	ldd	r23, Y+54	; 0x36
    3dfa:	8f a9       	ldd	r24, Y+55	; 0x37
    3dfc:	98 ad       	ldd	r25, Y+56	; 0x38
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	4a ef       	ldi	r20, 0xFA	; 250
    3e04:	54 e4       	ldi	r21, 0x44	; 68
    3e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	89 ab       	std	Y+49, r24	; 0x31
    3e10:	9a ab       	std	Y+50, r25	; 0x32
    3e12:	ab ab       	std	Y+51, r26	; 0x33
    3e14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e16:	69 a9       	ldd	r22, Y+49	; 0x31
    3e18:	7a a9       	ldd	r23, Y+50	; 0x32
    3e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e8       	ldi	r20, 0x80	; 128
    3e24:	5f e3       	ldi	r21, 0x3F	; 63
    3e26:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e2a:	88 23       	and	r24, r24
    3e2c:	2c f4       	brge	.+10     	; 0x3e38 <Parking_Runnable+0x3a0>
		__ticks = 1;
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	98 ab       	std	Y+48, r25	; 0x30
    3e34:	8f a7       	std	Y+47, r24	; 0x2f
    3e36:	3f c0       	rjmp	.+126    	; 0x3eb6 <Parking_Runnable+0x41e>
	else if (__tmp > 65535)
    3e38:	69 a9       	ldd	r22, Y+49	; 0x31
    3e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    3e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    3e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	3f ef       	ldi	r19, 0xFF	; 255
    3e44:	4f e7       	ldi	r20, 0x7F	; 127
    3e46:	57 e4       	ldi	r21, 0x47	; 71
    3e48:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e4c:	18 16       	cp	r1, r24
    3e4e:	4c f5       	brge	.+82     	; 0x3ea2 <Parking_Runnable+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e50:	6d a9       	ldd	r22, Y+53	; 0x35
    3e52:	7e a9       	ldd	r23, Y+54	; 0x36
    3e54:	8f a9       	ldd	r24, Y+55	; 0x37
    3e56:	98 ad       	ldd	r25, Y+56	; 0x38
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e2       	ldi	r20, 0x20	; 32
    3e5e:	51 e4       	ldi	r21, 0x41	; 65
    3e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	98 ab       	std	Y+48, r25	; 0x30
    3e76:	8f a7       	std	Y+47, r24	; 0x2f
    3e78:	0f c0       	rjmp	.+30     	; 0x3e98 <Parking_Runnable+0x400>
    3e7a:	88 ec       	ldi	r24, 0xC8	; 200
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	9e a7       	std	Y+46, r25	; 0x2e
    3e80:	8d a7       	std	Y+45, r24	; 0x2d
    3e82:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e84:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <Parking_Runnable+0x3ee>
    3e8a:	9e a7       	std	Y+46, r25	; 0x2e
    3e8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e90:	98 a9       	ldd	r25, Y+48	; 0x30
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	98 ab       	std	Y+48, r25	; 0x30
    3e96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e9c:	00 97       	sbiw	r24, 0x00	; 0
    3e9e:	69 f7       	brne	.-38     	; 0x3e7a <Parking_Runnable+0x3e2>
    3ea0:	14 c0       	rjmp	.+40     	; 0x3eca <Parking_Runnable+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea2:	69 a9       	ldd	r22, Y+49	; 0x31
    3ea4:	7a a9       	ldd	r23, Y+50	; 0x32
    3ea6:	8b a9       	ldd	r24, Y+51	; 0x33
    3ea8:	9c a9       	ldd	r25, Y+52	; 0x34
    3eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	98 ab       	std	Y+48, r25	; 0x30
    3eb4:	8f a7       	std	Y+47, r24	; 0x2f
    3eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    3eba:	9c a7       	std	Y+44, r25	; 0x2c
    3ebc:	8b a7       	std	Y+43, r24	; 0x2b
    3ebe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ec0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	f1 f7       	brne	.-4      	; 0x3ec2 <Parking_Runnable+0x42a>
    3ec6:	9c a7       	std	Y+44, r25	; 0x2c
    3ec8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);
	CarCon_VStop_Move();
    3eca:	0e 94 78 19 	call	0x32f0	; 0x32f0 <CarCon_VStop_Move>
	CarCon_VStop_Rotate();
    3ece:	0e 94 27 1a 	call	0x344e	; 0x344e <CarCon_VStop_Rotate>

	Park_Finish();
    3ed2:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <Park_Finish>

	Spot=Car_Parked;
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	80 93 c3 01 	sts	0x01C3, r24

	DIO_WritePin(LED_PIN,LOW);
    3edc:	89 e0       	ldi	r24, 0x09	; 9
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
	Timer0_stop();
    3ee4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Timer0_stop>
	DIO_WritePin(BUZZER_PIN,HIGH);
    3ee8:	88 e0       	ldi	r24, 0x08	; 8
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	a8 e4       	ldi	r26, 0x48	; 72
    3ef6:	b3 e4       	ldi	r27, 0x43	; 67
    3ef8:	8f a3       	std	Y+39, r24	; 0x27
    3efa:	98 a7       	std	Y+40, r25	; 0x28
    3efc:	a9 a7       	std	Y+41, r26	; 0x29
    3efe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f00:	6f a1       	ldd	r22, Y+39	; 0x27
    3f02:	78 a5       	ldd	r23, Y+40	; 0x28
    3f04:	89 a5       	ldd	r24, Y+41	; 0x29
    3f06:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	4a ef       	ldi	r20, 0xFA	; 250
    3f0e:	54 e4       	ldi	r21, 0x44	; 68
    3f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	8b a3       	std	Y+35, r24	; 0x23
    3f1a:	9c a3       	std	Y+36, r25	; 0x24
    3f1c:	ad a3       	std	Y+37, r26	; 0x25
    3f1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f20:	6b a1       	ldd	r22, Y+35	; 0x23
    3f22:	7c a1       	ldd	r23, Y+36	; 0x24
    3f24:	8d a1       	ldd	r24, Y+37	; 0x25
    3f26:	9e a1       	ldd	r25, Y+38	; 0x26
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	40 e8       	ldi	r20, 0x80	; 128
    3f2e:	5f e3       	ldi	r21, 0x3F	; 63
    3f30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f34:	88 23       	and	r24, r24
    3f36:	2c f4       	brge	.+10     	; 0x3f42 <Parking_Runnable+0x4aa>
		__ticks = 1;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	9a a3       	std	Y+34, r25	; 0x22
    3f3e:	89 a3       	std	Y+33, r24	; 0x21
    3f40:	3f c0       	rjmp	.+126    	; 0x3fc0 <Parking_Runnable+0x528>
	else if (__tmp > 65535)
    3f42:	6b a1       	ldd	r22, Y+35	; 0x23
    3f44:	7c a1       	ldd	r23, Y+36	; 0x24
    3f46:	8d a1       	ldd	r24, Y+37	; 0x25
    3f48:	9e a1       	ldd	r25, Y+38	; 0x26
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	3f ef       	ldi	r19, 0xFF	; 255
    3f4e:	4f e7       	ldi	r20, 0x7F	; 127
    3f50:	57 e4       	ldi	r21, 0x47	; 71
    3f52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f56:	18 16       	cp	r1, r24
    3f58:	4c f5       	brge	.+82     	; 0x3fac <Parking_Runnable+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f5a:	6f a1       	ldd	r22, Y+39	; 0x27
    3f5c:	78 a5       	ldd	r23, Y+40	; 0x28
    3f5e:	89 a5       	ldd	r24, Y+41	; 0x29
    3f60:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	40 e2       	ldi	r20, 0x20	; 32
    3f68:	51 e4       	ldi	r21, 0x41	; 65
    3f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6e:	dc 01       	movw	r26, r24
    3f70:	cb 01       	movw	r24, r22
    3f72:	bc 01       	movw	r22, r24
    3f74:	cd 01       	movw	r24, r26
    3f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	9a a3       	std	Y+34, r25	; 0x22
    3f80:	89 a3       	std	Y+33, r24	; 0x21
    3f82:	0f c0       	rjmp	.+30     	; 0x3fa2 <Parking_Runnable+0x50a>
    3f84:	88 ec       	ldi	r24, 0xC8	; 200
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	98 a3       	std	Y+32, r25	; 0x20
    3f8a:	8f 8f       	std	Y+31, r24	; 0x1f
    3f8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f8e:	98 a1       	ldd	r25, Y+32	; 0x20
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <Parking_Runnable+0x4f8>
    3f94:	98 a3       	std	Y+32, r25	; 0x20
    3f96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f98:	89 a1       	ldd	r24, Y+33	; 0x21
    3f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	9a a3       	std	Y+34, r25	; 0x22
    3fa0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa2:	89 a1       	ldd	r24, Y+33	; 0x21
    3fa4:	9a a1       	ldd	r25, Y+34	; 0x22
    3fa6:	00 97       	sbiw	r24, 0x00	; 0
    3fa8:	69 f7       	brne	.-38     	; 0x3f84 <Parking_Runnable+0x4ec>
    3faa:	14 c0       	rjmp	.+40     	; 0x3fd4 <Parking_Runnable+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fac:	6b a1       	ldd	r22, Y+35	; 0x23
    3fae:	7c a1       	ldd	r23, Y+36	; 0x24
    3fb0:	8d a1       	ldd	r24, Y+37	; 0x25
    3fb2:	9e a1       	ldd	r25, Y+38	; 0x26
    3fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	9a a3       	std	Y+34, r25	; 0x22
    3fbe:	89 a3       	std	Y+33, r24	; 0x21
    3fc0:	89 a1       	ldd	r24, Y+33	; 0x21
    3fc2:	9a a1       	ldd	r25, Y+34	; 0x22
    3fc4:	9e 8f       	std	Y+30, r25	; 0x1e
    3fc6:	8d 8f       	std	Y+29, r24	; 0x1d
    3fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	f1 f7       	brne	.-4      	; 0x3fcc <Parking_Runnable+0x534>
    3fd0:	9e 8f       	std	Y+30, r25	; 0x1e
    3fd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	DIO_WritePin(BUZZER_PIN,LOW);
    3fd4:	88 e0       	ldi	r24, 0x08	; 8
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	a8 ec       	ldi	r26, 0xC8	; 200
    3fe2:	b2 e4       	ldi	r27, 0x42	; 66
    3fe4:	89 8f       	std	Y+25, r24	; 0x19
    3fe6:	9a 8f       	std	Y+26, r25	; 0x1a
    3fe8:	ab 8f       	std	Y+27, r26	; 0x1b
    3fea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fec:	69 8d       	ldd	r22, Y+25	; 0x19
    3fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	4a ef       	ldi	r20, 0xFA	; 250
    3ffa:	54 e4       	ldi	r21, 0x44	; 68
    3ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	8d 8b       	std	Y+21, r24	; 0x15
    4006:	9e 8b       	std	Y+22, r25	; 0x16
    4008:	af 8b       	std	Y+23, r26	; 0x17
    400a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    400c:	6d 89       	ldd	r22, Y+21	; 0x15
    400e:	7e 89       	ldd	r23, Y+22	; 0x16
    4010:	8f 89       	ldd	r24, Y+23	; 0x17
    4012:	98 8d       	ldd	r25, Y+24	; 0x18
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e8       	ldi	r20, 0x80	; 128
    401a:	5f e3       	ldi	r21, 0x3F	; 63
    401c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4020:	88 23       	and	r24, r24
    4022:	2c f4       	brge	.+10     	; 0x402e <Parking_Runnable+0x596>
		__ticks = 1;
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	9c 8b       	std	Y+20, r25	; 0x14
    402a:	8b 8b       	std	Y+19, r24	; 0x13
    402c:	3f c0       	rjmp	.+126    	; 0x40ac <Parking_Runnable+0x614>
	else if (__tmp > 65535)
    402e:	6d 89       	ldd	r22, Y+21	; 0x15
    4030:	7e 89       	ldd	r23, Y+22	; 0x16
    4032:	8f 89       	ldd	r24, Y+23	; 0x17
    4034:	98 8d       	ldd	r25, Y+24	; 0x18
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	3f ef       	ldi	r19, 0xFF	; 255
    403a:	4f e7       	ldi	r20, 0x7F	; 127
    403c:	57 e4       	ldi	r21, 0x47	; 71
    403e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4042:	18 16       	cp	r1, r24
    4044:	4c f5       	brge	.+82     	; 0x4098 <Parking_Runnable+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4046:	69 8d       	ldd	r22, Y+25	; 0x19
    4048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    404a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    404c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	40 e2       	ldi	r20, 0x20	; 32
    4054:	51 e4       	ldi	r21, 0x41	; 65
    4056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	bc 01       	movw	r22, r24
    4060:	cd 01       	movw	r24, r26
    4062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	9c 8b       	std	Y+20, r25	; 0x14
    406c:	8b 8b       	std	Y+19, r24	; 0x13
    406e:	0f c0       	rjmp	.+30     	; 0x408e <Parking_Runnable+0x5f6>
    4070:	88 ec       	ldi	r24, 0xC8	; 200
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	9a 8b       	std	Y+18, r25	; 0x12
    4076:	89 8b       	std	Y+17, r24	; 0x11
    4078:	89 89       	ldd	r24, Y+17	; 0x11
    407a:	9a 89       	ldd	r25, Y+18	; 0x12
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	f1 f7       	brne	.-4      	; 0x407c <Parking_Runnable+0x5e4>
    4080:	9a 8b       	std	Y+18, r25	; 0x12
    4082:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4084:	8b 89       	ldd	r24, Y+19	; 0x13
    4086:	9c 89       	ldd	r25, Y+20	; 0x14
    4088:	01 97       	sbiw	r24, 0x01	; 1
    408a:	9c 8b       	std	Y+20, r25	; 0x14
    408c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408e:	8b 89       	ldd	r24, Y+19	; 0x13
    4090:	9c 89       	ldd	r25, Y+20	; 0x14
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	69 f7       	brne	.-38     	; 0x4070 <Parking_Runnable+0x5d8>
    4096:	14 c0       	rjmp	.+40     	; 0x40c0 <Parking_Runnable+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4098:	6d 89       	ldd	r22, Y+21	; 0x15
    409a:	7e 89       	ldd	r23, Y+22	; 0x16
    409c:	8f 89       	ldd	r24, Y+23	; 0x17
    409e:	98 8d       	ldd	r25, Y+24	; 0x18
    40a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	9c 8b       	std	Y+20, r25	; 0x14
    40aa:	8b 8b       	std	Y+19, r24	; 0x13
    40ac:	8b 89       	ldd	r24, Y+19	; 0x13
    40ae:	9c 89       	ldd	r25, Y+20	; 0x14
    40b0:	98 8b       	std	Y+16, r25	; 0x10
    40b2:	8f 87       	std	Y+15, r24	; 0x0f
    40b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40b6:	98 89       	ldd	r25, Y+16	; 0x10
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <Parking_Runnable+0x620>
    40bc:	98 8b       	std	Y+16, r25	; 0x10
    40be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	DIO_WritePin(BUZZER_PIN,HIGH);
    40c0:	88 e0       	ldi	r24, 0x08	; 8
    40c2:	61 e0       	ldi	r22, 0x01	; 1
    40c4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	a8 e4       	ldi	r26, 0x48	; 72
    40ce:	b3 e4       	ldi	r27, 0x43	; 67
    40d0:	8b 87       	std	Y+11, r24	; 0x0b
    40d2:	9c 87       	std	Y+12, r25	; 0x0c
    40d4:	ad 87       	std	Y+13, r26	; 0x0d
    40d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40da:	7c 85       	ldd	r23, Y+12	; 0x0c
    40dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40de:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	4a ef       	ldi	r20, 0xFA	; 250
    40e6:	54 e4       	ldi	r21, 0x44	; 68
    40e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	8f 83       	std	Y+7, r24	; 0x07
    40f2:	98 87       	std	Y+8, r25	; 0x08
    40f4:	a9 87       	std	Y+9, r26	; 0x09
    40f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40f8:	6f 81       	ldd	r22, Y+7	; 0x07
    40fa:	78 85       	ldd	r23, Y+8	; 0x08
    40fc:	89 85       	ldd	r24, Y+9	; 0x09
    40fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	40 e8       	ldi	r20, 0x80	; 128
    4106:	5f e3       	ldi	r21, 0x3F	; 63
    4108:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    410c:	88 23       	and	r24, r24
    410e:	2c f4       	brge	.+10     	; 0x411a <Parking_Runnable+0x682>
		__ticks = 1;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	9e 83       	std	Y+6, r25	; 0x06
    4116:	8d 83       	std	Y+5, r24	; 0x05
    4118:	3f c0       	rjmp	.+126    	; 0x4198 <Parking_Runnable+0x700>
	else if (__tmp > 65535)
    411a:	6f 81       	ldd	r22, Y+7	; 0x07
    411c:	78 85       	ldd	r23, Y+8	; 0x08
    411e:	89 85       	ldd	r24, Y+9	; 0x09
    4120:	9a 85       	ldd	r25, Y+10	; 0x0a
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	3f ef       	ldi	r19, 0xFF	; 255
    4126:	4f e7       	ldi	r20, 0x7F	; 127
    4128:	57 e4       	ldi	r21, 0x47	; 71
    412a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    412e:	18 16       	cp	r1, r24
    4130:	4c f5       	brge	.+82     	; 0x4184 <Parking_Runnable+0x6ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4132:	6b 85       	ldd	r22, Y+11	; 0x0b
    4134:	7c 85       	ldd	r23, Y+12	; 0x0c
    4136:	8d 85       	ldd	r24, Y+13	; 0x0d
    4138:	9e 85       	ldd	r25, Y+14	; 0x0e
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e2       	ldi	r20, 0x20	; 32
    4140:	51 e4       	ldi	r21, 0x41	; 65
    4142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	bc 01       	movw	r22, r24
    414c:	cd 01       	movw	r24, r26
    414e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	9e 83       	std	Y+6, r25	; 0x06
    4158:	8d 83       	std	Y+5, r24	; 0x05
    415a:	0f c0       	rjmp	.+30     	; 0x417a <Parking_Runnable+0x6e2>
    415c:	88 ec       	ldi	r24, 0xC8	; 200
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	9c 83       	std	Y+4, r25	; 0x04
    4162:	8b 83       	std	Y+3, r24	; 0x03
    4164:	8b 81       	ldd	r24, Y+3	; 0x03
    4166:	9c 81       	ldd	r25, Y+4	; 0x04
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	f1 f7       	brne	.-4      	; 0x4168 <Parking_Runnable+0x6d0>
    416c:	9c 83       	std	Y+4, r25	; 0x04
    416e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4170:	8d 81       	ldd	r24, Y+5	; 0x05
    4172:	9e 81       	ldd	r25, Y+6	; 0x06
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	9e 83       	std	Y+6, r25	; 0x06
    4178:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417a:	8d 81       	ldd	r24, Y+5	; 0x05
    417c:	9e 81       	ldd	r25, Y+6	; 0x06
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	69 f7       	brne	.-38     	; 0x415c <Parking_Runnable+0x6c4>
    4182:	14 c0       	rjmp	.+40     	; 0x41ac <Parking_Runnable+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4184:	6f 81       	ldd	r22, Y+7	; 0x07
    4186:	78 85       	ldd	r23, Y+8	; 0x08
    4188:	89 85       	ldd	r24, Y+9	; 0x09
    418a:	9a 85       	ldd	r25, Y+10	; 0x0a
    418c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	9e 83       	std	Y+6, r25	; 0x06
    4196:	8d 83       	std	Y+5, r24	; 0x05
    4198:	8d 81       	ldd	r24, Y+5	; 0x05
    419a:	9e 81       	ldd	r25, Y+6	; 0x06
    419c:	9a 83       	std	Y+2, r25	; 0x02
    419e:	89 83       	std	Y+1, r24	; 0x01
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <Parking_Runnable+0x70c>
    41a8:	9a 83       	std	Y+2, r25	; 0x02
    41aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_WritePin(BUZZER_PIN,LOW);
    41ac:	88 e0       	ldi	r24, 0x08	; 8
    41ae:	60 e0       	ldi	r22, 0x00	; 0
    41b0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <DIO_WritePin>
}
    41b4:	cc 5a       	subi	r28, 0xAC	; 172
    41b6:	df 4f       	sbci	r29, 0xFF	; 255
    41b8:	0f b6       	in	r0, 0x3f	; 63
    41ba:	f8 94       	cli
    41bc:	de bf       	out	0x3e, r29	; 62
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	cd bf       	out	0x3d, r28	; 61
    41c2:	cf 91       	pop	r28
    41c4:	df 91       	pop	r29
    41c6:	1f 91       	pop	r17
    41c8:	0f 91       	pop	r16
    41ca:	08 95       	ret

000041cc <main>:
#include "Auto_Parking.h"

int main(void)
{
    41cc:	df 93       	push	r29
    41ce:	cf 93       	push	r28
    41d0:	cd b7       	in	r28, 0x3d	; 61
    41d2:	de b7       	in	r29, 0x3e	; 62
	Auto_Parking_init();
    41d4:	0e 94 36 1a 	call	0x346c	; 0x346c <Auto_Parking_init>

	while(1)
	{
		Auto_Parking_Runnable();
    41d8:	0e 94 43 1a 	call	0x3486	; 0x3486 <Auto_Parking_Runnable>
    41dc:	fd cf       	rjmp	.-6      	; 0x41d8 <main+0xc>

000041de <__udivmodhi4>:
    41de:	aa 1b       	sub	r26, r26
    41e0:	bb 1b       	sub	r27, r27
    41e2:	51 e1       	ldi	r21, 0x11	; 17
    41e4:	07 c0       	rjmp	.+14     	; 0x41f4 <__udivmodhi4_ep>

000041e6 <__udivmodhi4_loop>:
    41e6:	aa 1f       	adc	r26, r26
    41e8:	bb 1f       	adc	r27, r27
    41ea:	a6 17       	cp	r26, r22
    41ec:	b7 07       	cpc	r27, r23
    41ee:	10 f0       	brcs	.+4      	; 0x41f4 <__udivmodhi4_ep>
    41f0:	a6 1b       	sub	r26, r22
    41f2:	b7 0b       	sbc	r27, r23

000041f4 <__udivmodhi4_ep>:
    41f4:	88 1f       	adc	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	5a 95       	dec	r21
    41fa:	a9 f7       	brne	.-22     	; 0x41e6 <__udivmodhi4_loop>
    41fc:	80 95       	com	r24
    41fe:	90 95       	com	r25
    4200:	bc 01       	movw	r22, r24
    4202:	cd 01       	movw	r24, r26
    4204:	08 95       	ret

00004206 <__divmodhi4>:
    4206:	97 fb       	bst	r25, 7
    4208:	09 2e       	mov	r0, r25
    420a:	07 26       	eor	r0, r23
    420c:	0a d0       	rcall	.+20     	; 0x4222 <__divmodhi4_neg1>
    420e:	77 fd       	sbrc	r23, 7
    4210:	04 d0       	rcall	.+8      	; 0x421a <__divmodhi4_neg2>
    4212:	e5 df       	rcall	.-54     	; 0x41de <__udivmodhi4>
    4214:	06 d0       	rcall	.+12     	; 0x4222 <__divmodhi4_neg1>
    4216:	00 20       	and	r0, r0
    4218:	1a f4       	brpl	.+6      	; 0x4220 <__divmodhi4_exit>

0000421a <__divmodhi4_neg2>:
    421a:	70 95       	com	r23
    421c:	61 95       	neg	r22
    421e:	7f 4f       	sbci	r23, 0xFF	; 255

00004220 <__divmodhi4_exit>:
    4220:	08 95       	ret

00004222 <__divmodhi4_neg1>:
    4222:	f6 f7       	brtc	.-4      	; 0x4220 <__divmodhi4_exit>
    4224:	90 95       	com	r25
    4226:	81 95       	neg	r24
    4228:	9f 4f       	sbci	r25, 0xFF	; 255
    422a:	08 95       	ret

0000422c <__udivmodsi4>:
    422c:	a1 e2       	ldi	r26, 0x21	; 33
    422e:	1a 2e       	mov	r1, r26
    4230:	aa 1b       	sub	r26, r26
    4232:	bb 1b       	sub	r27, r27
    4234:	fd 01       	movw	r30, r26
    4236:	0d c0       	rjmp	.+26     	; 0x4252 <__udivmodsi4_ep>

00004238 <__udivmodsi4_loop>:
    4238:	aa 1f       	adc	r26, r26
    423a:	bb 1f       	adc	r27, r27
    423c:	ee 1f       	adc	r30, r30
    423e:	ff 1f       	adc	r31, r31
    4240:	a2 17       	cp	r26, r18
    4242:	b3 07       	cpc	r27, r19
    4244:	e4 07       	cpc	r30, r20
    4246:	f5 07       	cpc	r31, r21
    4248:	20 f0       	brcs	.+8      	; 0x4252 <__udivmodsi4_ep>
    424a:	a2 1b       	sub	r26, r18
    424c:	b3 0b       	sbc	r27, r19
    424e:	e4 0b       	sbc	r30, r20
    4250:	f5 0b       	sbc	r31, r21

00004252 <__udivmodsi4_ep>:
    4252:	66 1f       	adc	r22, r22
    4254:	77 1f       	adc	r23, r23
    4256:	88 1f       	adc	r24, r24
    4258:	99 1f       	adc	r25, r25
    425a:	1a 94       	dec	r1
    425c:	69 f7       	brne	.-38     	; 0x4238 <__udivmodsi4_loop>
    425e:	60 95       	com	r22
    4260:	70 95       	com	r23
    4262:	80 95       	com	r24
    4264:	90 95       	com	r25
    4266:	9b 01       	movw	r18, r22
    4268:	ac 01       	movw	r20, r24
    426a:	bd 01       	movw	r22, r26
    426c:	cf 01       	movw	r24, r30
    426e:	08 95       	ret

00004270 <__prologue_saves__>:
    4270:	2f 92       	push	r2
    4272:	3f 92       	push	r3
    4274:	4f 92       	push	r4
    4276:	5f 92       	push	r5
    4278:	6f 92       	push	r6
    427a:	7f 92       	push	r7
    427c:	8f 92       	push	r8
    427e:	9f 92       	push	r9
    4280:	af 92       	push	r10
    4282:	bf 92       	push	r11
    4284:	cf 92       	push	r12
    4286:	df 92       	push	r13
    4288:	ef 92       	push	r14
    428a:	ff 92       	push	r15
    428c:	0f 93       	push	r16
    428e:	1f 93       	push	r17
    4290:	cf 93       	push	r28
    4292:	df 93       	push	r29
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	ca 1b       	sub	r28, r26
    429a:	db 0b       	sbc	r29, r27
    429c:	0f b6       	in	r0, 0x3f	; 63
    429e:	f8 94       	cli
    42a0:	de bf       	out	0x3e, r29	; 62
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	cd bf       	out	0x3d, r28	; 61
    42a6:	09 94       	ijmp

000042a8 <__epilogue_restores__>:
    42a8:	2a 88       	ldd	r2, Y+18	; 0x12
    42aa:	39 88       	ldd	r3, Y+17	; 0x11
    42ac:	48 88       	ldd	r4, Y+16	; 0x10
    42ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    42b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    42b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    42b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    42b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    42b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    42ba:	b9 84       	ldd	r11, Y+9	; 0x09
    42bc:	c8 84       	ldd	r12, Y+8	; 0x08
    42be:	df 80       	ldd	r13, Y+7	; 0x07
    42c0:	ee 80       	ldd	r14, Y+6	; 0x06
    42c2:	fd 80       	ldd	r15, Y+5	; 0x05
    42c4:	0c 81       	ldd	r16, Y+4	; 0x04
    42c6:	1b 81       	ldd	r17, Y+3	; 0x03
    42c8:	aa 81       	ldd	r26, Y+2	; 0x02
    42ca:	b9 81       	ldd	r27, Y+1	; 0x01
    42cc:	ce 0f       	add	r28, r30
    42ce:	d1 1d       	adc	r29, r1
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	ed 01       	movw	r28, r26
    42dc:	08 95       	ret

000042de <_exit>:
    42de:	f8 94       	cli

000042e0 <__stop_program>:
    42e0:	ff cf       	rjmp	.-2      	; 0x42e0 <__stop_program>
